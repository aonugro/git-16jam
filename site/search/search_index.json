{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"01-pendahuluan/","title":"Pendahuluan","text":"<p>\u2728 Kata Pengantar</p> <p>Selamat datang di petualangan 24 jam bersama Git! Buku ini bukan hanya tentang baris perintah atau commit dan push belaka, tapi tentang cara berpikir sistematis, bekerja kolaboratif, dan... ya, kadang juga tentang mengatasi konflik \u2014 antara branch</p> <p>Git, GitHub, dan GitBook adalah alat-alat penting bagi peneliti dan pembelajar abad ke-21. Dengan menguasainya, kamu bisa menyusun riset yang rapi, bisa dilacak, dan bisa dibagikan ke seluruh dunia. Termasuk ke pembimbingmu \u2014 tanpa harus tanya, \u201cVersi final_final_FIX_beneran.pdf yang mana ya?\u201d</p> <p>Mari kita belajar perlahan tapi pasti. Karena ilmu yang bisa dilacak, adalah ilmu yang bisa berkembang.</p> <p>Penyusun,</p> <p>Aryo Nugroho</p>"},{"location":"02-pengantar-praktis/","title":"Pengantar Praktis","text":"<p>\ud83d\udee0\ufe0f Pengantar Bagian Praktis: Bab 1\u201316 \"Latihan Otot Git-mu Dimulai di Sini\"</p> <p>Selamat datang di bagian di mana tanganmu lebih aktif dari keningmu. Di sini kamu akan mencetak commit pertama, membuat branch seperti percabangan takdir, dan belajar bahwa merge itu bisa damai kalau dikerjakan dengan sabar.</p> <p>Bab 1 sampai 16 adalah arena latihan otot Git-mu\u2014bukan hanya otot jari, tapi juga otot logika, struktur berpikir, dan sedikit otot sabar saat konflik muncul.</p> <p>Setiap langkah dirancang agar kamu belajar lewat praktik, bukan hanya paham secara teoretis. Karena Git tidak bisa hanya dibaca. Ia harus disentuh, dicoba, lalu di-push ke cloud.</p> <p>Mari kita mulai. Dan ingat: kalau ragu, commit saja dulu\u2014Git akan jagain kamu.</p>"},{"location":"03-bab01/","title":"Bab 1","text":"<p>\ud83c\udf93 Bab 1 Apa Itu Git, dan Mengapa Penting?</p> <p>Pendahuluan</p> <p>Bayangkan kamu sedang menulis skripsi atau laporan riset. Hari pertama kamu menulis bab pendahuluan, lalu kamu simpan. Besoknya kamu edit lagi, lalu simpan dengan nama baru: <code>laporan_final.docx</code>. Besoknya lagi, kamu buat <code>laporan_fix_baru.docx</code>, lalu <code>final_fix_revisi_beneran.docx</code>, dan akhirnya kamu sendiri lupa... mana yang seharusnya dikumpulkan.</p> <p>Kalau kamu pernah mengalami kekacauan itu, kamu tidak sendiri. Dan di sinilah Git hadir sebagai penyelamat dokumen, penyelamat proyek, dan penyelamat kewarasan para peneliti, programmer, dan penulis.</p> <p>\ud83d\udd0d Apa Itu Git?</p> <p>Git adalah sebuah version control system (sistem pengendali versi). Artinya, Git menyimpan jejak setiap perubahan yang kamu buat terhadap file, entah itu dokumen, kode, atau data.</p> <p>Kamu bisa bayangkan Git sebagai mesin waktu untuk proyekmu. Ia mencatat: - Kapan file berubah - Apa yang berubah - Siapa yang mengubah - Dan kamu bisa kembali ke versi mana pun dengan satu klik (atau satu perintah)</p> <p>Git bukan satu-satunya sistem version control, tapi ia yang paling populer. Dikembangkan oleh Linus Torvalds (pencipta Linux) tahun 2005, Git kini menjadi standar global dalam pengembangan perangkat lunak dan dokumentasi ilmiah.</p> <p>\ud83e\udde0 Mengapa Git Penting?</p> <p>Mari kita lihat manfaat Git dalam kehidupan nyata\u2014khususnya untuk mahasiswa, dosen, peneliti, atau siapa pun yang bekerja dengan file digital:</p> <ol> <li> <p>\ud83d\udd04 Riwayat Versi Git mencatat semua versi proyekmu. Tidak perlu lagi simpan file dengan nama: <code>fix_terakhir_final_bener.docx</code>. Kamu cukup ketik <code>git log</code>, dan semua versi akan muncul dengan jelas.</p> </li> <li> <p>\ud83e\uddea Eksperimen Aman Ingin coba metode analisis baru tapi takut merusak kode lama? Dengan Git, kamu bisa buat cabang (branch) khusus, bereksperimen, lalu kembali ke versi semula kapan saja.</p> </li> <li> <p>\ud83e\udd1d Kolaborasi Tanpa Tabrakan** Kalau kamu kerja tim, Git membantu semua anggota mengerjakan file yang sama tanpa saling menimpa. Bahkan kalau dua orang mengedit file yang sama, Git bisa mendeteksi konflik dan minta kamu memilih versi akhir.</p> </li> <li> <p>\ud83d\udce6 Backup Otomatis Kalau Git kamu sambungkan ke GitHub (cloud), kamu bisa backup proyek secara otomatis dan membukanya dari mana saja. Bahkan kalau laptop rusak, kerjaanmu tetap aman.</p> </li> </ol> <p>\ud83e\uddec Git dan Dunia Riset</p> <p>Git bukan cuma untuk programmer. Banyak peneliti mulai menggunakannya untuk: - Menyimpan dan berbagi data - Menuliskan analisis kode - Membuat laporan dengan reproducibility (hasil bisa diulang)</p> <p>Dalam dunia sains, reproducibility adalah kunci. Dan Git adalah alat utama untuk memastikan pekerjaanmu bisa ditelusuri, diulang, dan diverifikasi oleh siapa pun.</p> <p>\ud83d\udca1 Git itu Gratis dan Open Source</p> <p>Tidak kalah penting: Git sepenuhnya gratis dan open-source. Kamu bisa menginstalnya di Windows, Mac, atau Linux. Kamu tidak terikat pada satu layanan atau vendor.</p> <p>Dan yang lebih hebat lagi, kamu tidak perlu koneksi internet untuk menggunakannya \u2014 semua riwayat dan kontrol ada di laptopmu!</p> <p>\ud83c\udfaf Apa yang Akan Kamu Pelajari Setelah Ini?</p> <p>Di bab ini, kamu sudah mengenal: - Apa itu Git - Mengapa Git penting - Contoh nyata penggunaannya</p> <p>\ud83d\udccd Di bab berikutnya, kamu akan memeriksa apakah Git sudah ada di MacBook kamu, dan kalau belum, kamu akan belajar menginstal Git atau alternatifnya, yaitu GitHub Desktop.</p> <p>Siapkan kopimu dan folder kerja kosong. Petualangan digitalmu baru saja dimulai.</p>"},{"location":"04-bab02/","title":"Bab 2","text":"<p>\ud83d\udd27 Bab 2  Instalasi Git dan GitHub Desktop di MacBook</p> <p>\ud83e\udded Sebelum Memulai</p> <p>Pada bab sebelumnya, kamu telah mengenal Git: alat ajaib yang mampu mencatat setiap jejak perubahan file kamu. Seperti mesin waktu digital untuk proyek. Tapi... semua itu baru bisa kamu rasakan jika Git sudah terpasang di laptopmu.</p> <p>Bab ini adalah gerbang teknis pertama. Jangan khawatir\u2014kita akan melangkah pelan-pelan. Tujuan kita adalah memastikan: 1. Git tersedia di MacBook kamu. 2. Kalau belum ada, kamu tahu cara menginstalnya. 3. Dan kalau kamu lebih suka antarmuka visual (tanpa mengetik perintah), kamu juga bisa memakai GitHub Desktop.</p> <p>Siap? Yuk kita mulai!</p> <p>\ud83d\udcbb Apakah Git Sudah Terinstal?</p> <p>Langkah 1: Buka Terminal</p> <p>Pertama, buka aplikasi Terminal di MacBook kamu. Cara mudahnya: - Klik ikon kaca pembesar (\ud83d\udd0d Spotlight) - Ketik <code>Terminal</code>, lalu tekan Enter</p> <p>Terminal adalah jendela ke dunia teks, tempat kamu bisa mengetik perintah-perintah seperti hacker di film. Tapi tenang, kita tidak akan nge-hack siapa pun hari ini \ud83d\ude04</p> <p>Langkah 2: Cek Git</p> <p>Ketik perintah berikut di Terminal:</p> <pre><code>git --version\n</code></pre> <p>Jika muncul hasil seperti ini:</p> <pre><code>git version 2.30.1 (Apple Git-130)\n</code></pre> <p>\ud83c\udf89 Selamat! Git sudah terinstal di komputermu. Kamu bisa langsung lanjut ke bab berikutnya.</p> <p>\u274c Jika Git Belum Ada...</p> <p>Beberapa Mac yang baru atau belum pernah digunakan untuk coding mungkin belum punya Git. Kalau setelah mengetik <code>git --version</code> kamu melihat notifikasi seperti:</p> <p>\u201cThe \u2018git\u2019 command requires the command line developer tools.\u201d</p> <p>Itu artinya kamu harus memasang Xcode Command Line Tools, yang berisi Git di dalamnya.</p> <p>\ud83d\udee0\ufe0f Cara Install Git (via Xcode Tools)</p> <ol> <li>Buka Terminal</li> <li>Ketik perintah berikut:</li> </ol> <pre><code>xcode-select --install\n</code></pre> <ol> <li>Akan muncul pop-up, klik Install</li> <li>Tunggu proses download dan instalasi selesai</li> </ol> <p>Biasanya ini hanya butuh beberapa menit, tergantung koneksi internet kamu.</p> <p>Setelah selesai, kamu bisa ulangi <code>git --version</code> untuk memastikan Git sudah siap digunakan.</p> <p>\ud83c\udfa8 Alternatif GUI: Install GitHub Desktop</p> <p>Kalau kamu tidak suka Terminal\u2014tenang, kamu tidak sendiri. Banyak pemula merasa lebih nyaman dengan klik-klik daripada ketik-ketik. Untuk itu, tersedia aplikasi GitHub Desktop, yaitu cara memakai Git lewat antarmuka grafis.</p> <p>GitHub Desktop adalah pilihan ideal untuk: - Mahasiswa - Peneliti non-programmer - Penulis dokumentasi - Siapa pun yang suka hal visual</p> <p>\ud83d\udce5 Cara Instal GitHub Desktop di Mac</p> <ol> <li> <p>Buka browser dan kunjungi:    \ud83d\udc49 https://desktop.github.com</p> </li> <li> <p>Klik Download for macOS</p> </li> <li> <p>Setelah file <code>.dmg</code> selesai diunduh, buka dan drag ikon GitHub Desktop ke folder Applications</p> </li> <li> <p>Jalankan aplikasi GitHub Desktop    Kamu akan diminta login ke akun GitHub.    Kalau belum punya akun, daftar di https://github.com</p> </li> </ol> <p>\ud83e\udd14 Git atau GitHub Desktop: Mana yang Lebih Baik?</p> <p>Jawabannya: keduanya bagus, tergantung kamu nyaman yang mana.</p> Kriteria Terminal (Git CLI) GitHub Desktop Perlu ketik perintah \u2705 Ya \u274c Tidak Visual &amp; klik-klik \u274c Tidak \u2705 Ya Cocok untuk pemula \u26a0\ufe0f Bisa, tapi menakutkan \u2705 Sangat Fleksibilitas tinggi \u2705 Sangat \u26a0\ufe0f Terbatas Cocok untuk skrip otomatis \u2705 Ya \u274c Tidak <p>Saran kami: mulai dulu dengan GitHub Desktop, lalu nanti kamu bisa mencoba Terminal seiring waktu.</p> <p>\u2705 Checklist Bab Ini</p> <ul> <li>[ ] Sudah buka Terminal dan cek <code>git --version</code></li> <li>[ ] Jika belum ada Git, sudah install via <code>xcode-select --install</code></li> <li>[ ] Sudah download dan install GitHub Desktop</li> <li>[ ] Sudah login ke akun GitHub</li> </ul> <p>Kalau semua sudah, kamu siap untuk membuat proyek Git pertamamu! Kita akan memulainya di Bab 3, langsung dengan klik-klik lewat GitHub Desktop.</p>"},{"location":"05-bab03/","title":"Bab 3","text":"<p>\ud83d\udcbc Bab 3  Mengenal GitHub Desktop dan Membuat Repositori Lokal Pertama</p> <p>\ud83c\udf31 Awal dari Segalanya</p> <p>Kini, Git sudah terpasang di MacBook kamu, baik melalui Terminal maupun GitHub Desktop. Pertanyaan selanjutnya adalah: Sekarang aku harus ngapain?</p> <p>Bab ini akan menjadi titik tolak nyata dari petualanganmu bersama Git. Kita tidak akan membahas teori lagi. Kita akan langsung membuat repositori Git pertamamu, dan kamu akan melihat sendiri bagaimana Git mulai bekerja\u2014dengan cara yang ramah pemula: klik-klik, bukan ketik-ketik.</p> <p>\ud83e\udded Sekilas Tentang GitHub Desktop</p> <p>GitHub Desktop adalah aplikasi resmi dari GitHub yang membantu kamu: - Membuat repositori Git tanpa Terminal - Melihat perubahan file dalam bentuk visual - Commit, push, pull hanya dengan klik - Mengelola branch tanpa stres</p> <p>Antarmukanya bersih, minimalis, dan intuitif. Bahkan untuk yang baru pertama kali menggunakan Git, GitHub Desktop terasa seperti pintu masuk yang hangat ke dunia version control.</p> <p>\ud83c\udfd7\ufe0f Langkah-Langkah Membuat Repositori Baru</p> <p>Setelah kamu membuka GitHub Desktop, ikuti langkah-langkah berikut untuk membuat repositori (repo) lokal:</p> <ol> <li>Klik \u201cFile\u201d \u2192 \u201cNew Repository\u2026\u201d</li> </ol> <p>Langkah pertama adalah membuat tempat penyimpanan proyek kamu. Bayangkan repositori sebagai laci khusus yang akan mencatat semua perubahan yang kamu lakukan.</p> <ol> <li>Isi Informasi Repo</li> </ol> <p>Akan muncul form isian. Kamu hanya perlu mengisi beberapa hal:</p> <ul> <li>Name: Nama proyek kamu, misalnya <code>riset-ku</code></li> <li>Description (opsional): Misalnya, \u201cRepo untuk dokumentasi dan analisis riset sosial\u201d</li> <li>Local Path: Folder di laptop kamu tempat repo disimpan</li> <li>Centang \u201cInitialize this repository with a README\u201d supaya ada file awal</li> </ul> <p>Klik tombol Create Repository, dan... \ud83c\udf89 selesai! Kamu sekarang punya repositori Git pertama kamu sendiri.</p> <p>\ud83d\udcc1 Apa yang Terjadi di Balik Layar?</p> <p>Ketika kamu membuat repo, GitHub Desktop otomatis: - Menambahkan file <code>.git</code> tersembunyi yang menyimpan semua histori perubahan - Membuat file <code>README.md</code> sebagai penanda awal proyek - Menginisialisasi proyek agar siap dicatat oleh Git</p> <p>Kamu mungkin belum melihat hasil besar, tapi struktur dasar sudah siap. Layaknya menanam benih, ini adalah awal dari segalanya.</p> <p>\u270f\ufe0f Coba Edit README.md</p> <p>Sekarang mari kita buat perubahan kecil agar kamu bisa coba commit pertamamu.</p> <ol> <li>Buka folder <code>riset-ku</code> di Finder</li> <li>Buka file <code>README.md</code> dengan editor teks apa pun (bisa Notes, TextEdit, atau Visual Studio Code)</li> <li>Tambahkan satu baris: <code>Ini adalah proyek riset pertama saya menggunakan Git!</code></li> <li>Simpan file</li> </ol> <p>\u2705 Lakukan Commit Pertama</p> <p>Kembali ke GitHub Desktop. Kamu akan melihat Git secara otomatis mendeteksi perubahan di file <code>README.md</code>. Di bagian bawah, ada kolom untuk mengisi:</p> <ul> <li>Summary: Wajib. Misalnya: <code>Edit awal README</code></li> <li>Description: Opsional. Jelaskan lebih detail kalau perlu.</li> </ul> <p>Klik tombol Commit to main, dan\u2026 boom! \ud83c\udfaf Kamu baru saja mencatat perubahan pertama dalam riwayat proyekmu.</p> <p>\ud83e\udd14 Apa Itu Commit?</p> <p>Commit adalah cara Git \u201cmemotret\u201d kondisi proyek pada satu waktu. Kamu bisa menganggapnya seperti menekan tombol Save As Version. Setiap commit: - Mencatat perubahan - Menyimpan catatan waktu - Menyimpan nama pembuatnya</p> <p>Dengan commit, kamu bisa kembali ke masa lalu kapan saja.</p> <p>\ud83d\udccc Tips Tambahan</p> <ul> <li>Buat commit setiap kali kamu menyelesaikan bagian logis dari kerja kamu (misalnya setelah analisis selesai, atau dokumen diperbarui)</li> <li>Beri nama commit yang jelas, misalnya <code>Tambah penjelasan metode</code> atau <code>Import dataset awal</code></li> </ul> <p>\ud83d\udccb Checklist Bab Ini</p> <ul> <li>[ ] Membuka GitHub Desktop</li> <li>[ ] Membuat repo lokal bernama <code>riset-ku</code></li> <li>[ ] Menulis isi pertama README.md</li> <li>[ ] Melakukan commit pertama melalui GitHub Desktop</li> </ul> <p>Kalau semua sudah dicoba, selamat! Kamu bukan hanya membaca tentang Git\u2014kamu sudah menggunakannya secara nyata.</p> <p>\ud83d\ude80 Siap ke Bab Selanjutnya?</p> <p>Di Bab 4, kamu akan belajar menyusun folder proyek secara rapi: - Memisahkan antara data, kode, dan dokumen - Menyiapkan struktur folder yang siap diintegrasikan ke GitBook dan Zenodo</p> <p>Karena seperti rumah, repositori yang rapi akan lebih nyaman ditempati.</p>"},{"location":"06-bab04/","title":"Bab 4","text":"<p>\ud83d\udcc2 Bab 4  Menyusun Struktur Folder Proyek Riset dengan Git</p> <p>\ud83e\udde9 Mengapa Struktur Folder Itu Penting?</p> <p>Pernah membuka folder lama dan bingung sendiri dengan isinya? Misalnya, file bernama <code>datafix_baru.csv</code>, lalu <code>code_final_rev2.py</code>, dan <code>tugas_update_FINAL.docx</code>. Kamu tidak ingat lagi file mana yang seharusnya digunakan. Itulah kenapa struktur folder yang rapi dan konsisten sangat penting dalam proyek riset.</p> <p>Dalam dunia Git, struktur folder bukan sekadar estetika\u2014ia adalah fondasi keteraturan. Git mencatat perubahan berdasarkan file dan folder. Jadi, jika kamu menata proyek sejak awal, Git akan menjadi lebih mudah digunakan, dokumentasi lebih jelas, dan kolaborasi lebih lancar.</p> <p>Bab ini akan membimbingmu menyusun folder proyek yang profesional, rapi, dan siap untuk dokumentasi GitBook maupun publikasi ke Zenodo.</p> <p>\ud83d\uddc2\ufe0f Struktur Dasar Proyek Riset</p> <p>Mari kita mulai dari struktur paling umum yang bisa digunakan untuk hampir semua jenis riset digital.</p> <pre><code>riset-ku/\n\u251c\u2500\u2500 data/\n\u2502   \u2514\u2500\u2500 dataset.csv\n\u251c\u2500\u2500 code/\n\u2502   \u2514\u2500\u2500 analisis.py\n\u251c\u2500\u2500 docs/\n\u2502   \u2514\u2500\u2500 latar-belakang.md\n\u251c\u2500\u2500 .gitignore\n\u2514\u2500\u2500 README.md\n</code></pre> <p>Mari kita jelaskan satu per satu:</p> <ul> <li><code>data/</code>: Menyimpan semua dataset, baik mentah maupun bersih.</li> <li><code>code/</code>: Tempat menyimpan skrip pemrosesan data, analisis, atau visualisasi.</li> <li><code>docs/</code>: Folder dokumentasi dalam format Markdown\u2014ini yang akan dihubungkan ke GitBook.</li> <li><code>.gitignore</code>: File konfigurasi agar Git tidak melacak file tertentu.</li> <li><code>README.md</code>: Penjelasan umum isi proyek. Wajah depan repositori kamu.</li> </ul> <p>\ud83e\udded Langkah Menyusun Folder</p> <ol> <li>Buka Folder Proyek Kamu</li> </ol> <p>Gunakan Finder (atau File Explorer) dan buka folder tempat kamu membuat repositori Git sebelumnya, misalnya <code>riset-ku</code>.</p> <ol> <li>Buat Tiga Folder Utama</li> </ol> <p>Buat tiga folder dengan nama:</p> <ul> <li><code>data</code></li> <li><code>code</code></li> <li><code>docs</code></li> </ul> <p>Pastikan semua huruf kecil dan tanpa spasi untuk konsistensi.</p> <ol> <li>Tambahkan File Contoh (Opsional)</li> </ol> <p>Agar lebih jelas dan bisa langsung dicoba, kamu bisa membuat beberapa file dummy di dalamnya:</p> <ul> <li><code>data/sample.csv</code></li> <li><code>code/analisis.py</code></li> <li><code>docs/latar-belakang.md</code></li> </ul> <p>Cukup isi dengan beberapa baris teks, misalnya:</p> <p>sample.csv</p> <pre><code>id,nama,usia\n1,Ani,21\n2,Budi,22\n</code></pre> <p>analisis.py</p> <pre><code>print(\"Analisis sederhana dimulai...\")\n</code></pre> <p>latar-belakang.md</p> <pre><code> Latar Belakang\n\nProyek ini bertujuan untuk memahami pola data sosial melalui analisis sederhana.\n</code></pre> <p>\ud83d\udce6 Apa Manfaat Folder Terpisah?</p> <ul> <li>Keterbacaan tinggi: Tim bisa langsung tahu di mana letak kode atau data.</li> <li>Reproducibility: Publikasi ilmiah yang terbuka butuh struktur proyek yang jelas.</li> <li>Integrasi mudah ke GitBook: Folder <code>docs/</code> akan langsung terbaca sebagai halaman buku.</li> <li>Manajemen konflik Git lebih mudah: Saat file tersebar acak, risiko tabrakan lebih tinggi.</li> </ul> <p>\ud83e\uddfd Tambahkan File <code>.gitignore</code></p> <p>Git mencatat semua file, termasuk file sementara atau besar\u2014kecuali kamu minta Git mengabaikannya. Gunakan file <code>.gitignore</code> untuk menjaga kebersihan repositori.</p> <p>Contoh isi <code>.gitignore</code></p> <pre><code> File sistem\n.DS_Store\n\n Folder cache Python\n__pycache__/\n\n Dataset besar\ndata/.zip\ndata/.tar.gz\n\n Log dan file sementara\n.log\n.tmp\n</code></pre> <p>Kamu bisa membuat file <code>.gitignore</code> langsung dari GitHub Desktop: Repository \u2192 Open in Terminal \u2192 <code>touch .gitignore</code>, atau buat secara manual lewat TextEdit.</p> <p>\ud83d\udcdd Lakukan Commit Perubahan</p> <p>Setelah kamu membuat folder dan file dummy:</p> <ol> <li>Buka GitHub Desktop</li> <li>Kamu akan melihat perubahan terdeteksi otomatis</li> <li>Di kolom summary, isi misalnya: <code>Buat struktur folder awal dan file dummy</code></li> <li>Klik Commit to main</li> </ol> <p>Repositorimu sekarang memiliki bentuk yang rapi dan siap berkembang!</p> <p>\u2705 Checklist Bab Ini</p> <ul> <li>[ ] Membuat folder <code>data/</code>, <code>code/</code>, dan <code>docs/</code></li> <li>[ ] Menambahkan file dummy sebagai contoh</li> <li>[ ] Membuat file <code>.gitignore</code></li> <li>[ ] Melakukan commit perubahan via GitHub Desktop</li> </ul> <p>\ud83d\ude80 Bab Selanjutnya: Commit &amp; .gitignore</p> <p>Di Bab 5, kamu akan mempelajari lebih dalam tentang apa yang sebenarnya terjadi saat kamu commit, dan bagaimana Git memperlakukan file-file berbeda tergantung isi <code>.gitignore</code>.</p> <p>Kita akan bahas bagaimana Git \u201cmengingat\u201d dan \u201cmelupakan\u201d hal-hal tertentu\u2014dengan elegan.</p>"},{"location":"07-bab05/","title":"Bab 5","text":"<p>\ud83d\udcdd Bab 5  Memahami Commit dan .gitignore dalam Git</p> <p>\ud83e\udde0 Mengapa Commit Itu Penting?</p> <p>Bayangkan kamu sedang menyusun laporan. Kamu menulis bab demi bab, lalu simpan file setiap malam. Tapi kamu menyimpannya di atas versi lama, tanpa tahu apa yang berubah. Tiba-tiba kamu ingin kembali ke versi minggu lalu, tapi file-nya sudah ditimpa. Panik, ya?</p> <p>Dengan Git, kamu tidak perlu mengalami hal itu. Karena Git menyimpan riwayat versi setiap kali kamu membuat commit. Dan commit bukan hanya \"simpan biasa\", tapi \"simpan dengan catatan\".</p> <p>\ud83d\udccc Apa Itu Commit?</p> <p>Commit adalah proses menyimpan snapshot (cuplikan) kondisi proyek kamu saat itu. Setiap commit menyimpan: - Perubahan file - Waktu perubahan - Nama pembuat - Dan pesan penjelas (commit message)</p> <p>Git bekerja seperti buku harian proyekmu. Kamu bisa: - Menelusuri siapa melakukan apa - Kembali ke versi sebelumnya - Menganalisis perkembangan proyek</p> <p>\ud83d\udd04 Proses Commit Langkah demi Langkah</p> <p>Mari kita pahami alurnya secara praktis:</p> <ol> <li> <p>Kamu mengubah file Misalnya, menambahkan grafik baru ke <code>analisis.py</code>.</p> </li> <li> <p>Git mendeteksi perubahan GitHub Desktop akan menunjukkan file mana yang berubah.</p> </li> <li> <p>Kamu menulis pesan commit Pesan singkat seperti: <code>Tambah visualisasi data usia</code></p> </li> <li> <p>Kamu klik Commit to main Git menyimpan perubahan dan menandainya dengan ID unik.</p> </li> </ol> <p>\u270f\ufe0f Tips Menulis Commit Message yang Baik</p> <p>Commit message sebaiknya: - Spesifik: Hindari \"update\" atau \"fix\" - Ringkas tapi jelas: \"Perbaiki bug visualisasi di bar chart\" - Gunakan kata kerja aktif</p> <p>\ud83c\udf1f Ingat: commit adalah catatan historis. Tulis seolah-olah orang lain akan membaca dan menilai proyekmu!</p> <p>\ud83e\uddfd Memahami .gitignore</p> <p>Git itu rajin. Terlalu rajin, malah. Ia akan melacak semua file dalam foldermu, termasuk file sementara, file sistem, dan data mentah besar\u2014kecuali kamu bilang \u201cjangan ikutkan\u201d. Dan di sinilah <code>.gitignore</code> berperan.</p> <p>\ud83d\udcc1 Apa Itu <code>.gitignore</code>?</p> <p><code>.gitignore</code> adalah file teks sederhana yang memberi tahu Git: \u201cJangan lacak file ini atau folder ini.\u201d</p> <p>Contoh kasus: - Kamu punya file <code>.DS_Store</code> (file sistem macOS)? Masukkan ke <code>.gitignore</code> - Kamu simpan dataset besar <code>.zip</code>? Abaikan juga! - Folder <code>__pycache__/</code> dari Python? Jelas, harus diabaikan.</p> <p>\ud83e\uddea Contoh Isi <code>.gitignore</code></p> <pre><code> File sistem\n.DS_Store\n\n Python\n__pycache__/\n.pyc\n\n Dataset besar\ndata/.zip\ndata/.tar.gz\n\n Log\n.log\n</code></pre> <p>\ud83d\udcc4 Cara Membuat <code>.gitignore</code></p> <ol> <li>Buka folder proyek <code>riset-ku</code></li> <li>Buat file baru bernama <code>.gitignore</code> (perhatikan titik di awal!)</li> <li>Tambahkan daftar file atau pola yang ingin kamu abaikan</li> <li>Simpan, lalu commit via GitHub Desktop</li> </ol> <p>Catatan: Git hanya akan mengabaikan file yang belum terlanjur dicatat. Jadi, kalau kamu ingin mengabaikan <code>data/besar.zip</code>, pastikan file itu belum pernah kamu commit sebelumnya.</p> <p>\ud83d\udd0e Bagaimana Mengetahui File Diabaikan?</p> <p>GitHub Desktop akan otomatis menyembunyikan file yang termasuk daftar <code>.gitignore</code>. Kalau kamu ingin melihat file yang diabaikan secara manual (di Terminal):</p> <pre><code>git status --ignored\n</code></pre> <p>\ud83e\udde0 Analogi Sederhana</p> <ul> <li>Commit itu seperti memotret kondisi kamar kerjamu.</li> <li>.gitignore itu seperti menutup tirai untuk sudut-sudut kamar yang berantakan. Git tetap memotret, tapi hanya bagian yang kamu izinkan.</li> </ul> <p>\u2705 Checklist Bab Ini</p> <ul> <li>[ ] Menambahkan atau mengubah file dalam proyek</li> <li>[ ] Menulis pesan commit yang informatif</li> <li>[ ] Membuat file <code>.gitignore</code> dengan pola file yang tepat</li> <li>[ ] Commit <code>.gitignore</code> untuk menjaga kebersihan repo</li> </ul> <p>\ud83d\ude80 Bab Selanjutnya: Sinkronisasi ke GitHub</p> <p>Di Bab 6, kamu akan membawa proyekmu dari laptop ke cloud: melakukan push ke GitHub. Artinya, kamu menyimpan salinan proyek ke internet\u2014aman, bisa diakses dari mana saja, dan siap untuk kolaborasi.</p> <p>Git akan membantumu menyimpan. Tapi GitHub membantumu berbagi.</p>"},{"location":"08-bab06/","title":"Bab 6","text":"<p>\u2601\ufe0f Bab 6  Melakukan Push ke GitHub: Menyimpan Proyek ke Cloud</p> <p>\ud83c\udf0d Dari Lokal ke Global</p> <p>Bayangkan kamu baru saja menyusun folder riset dengan rapi: data tersimpan, kode berjalan, dokumentasi lengkap, dan commit sudah kamu buat. Tapi semua masih ada di satu tempat: laptop kamu sendiri.</p> <p>Apa yang terjadi jika laptop rusak? Atau kamu ingin bekerja dari perangkat lain? Atau kamu ingin membagikan proyekmu ke pembimbing atau tim?</p> <p>Di sinilah GitHub hadir sebagai jembatan. Dengan satu langkah kecil\u2014push\u2014kamu bisa menyimpan seluruh proyek ke awan (cloud), menjadikannya versi online, aman, dan siap kolaborasi.</p> <p>Bab ini akan membimbingmu melakukan push pertama ke GitHub menggunakan GitHub Desktop, dengan penjelasan sederhana, aman, dan menyenangkan.</p> <p>\ud83d\ude80 Apa Itu Push?</p> <p>Dalam dunia Git: - Commit = menyimpan perubahan ke dalam riwayat lokal - Push = mengirim riwayat lokal itu ke repositori online (GitHub)</p> <p>Think of it this way: commit itu seperti menulis di buku harian pribadimu, sedangkan push itu seperti memasang hasilnya di papan pengumuman digital. Orang lain bisa lihat, unduh, dan bahkan ikut membantu.</p> <p>\ud83d\udca1 Mengapa Push Itu Penting?</p> <ol> <li>Backup otomatis \u2014 file kamu tidak hanya di satu tempat</li> <li>Kolaborasi real-time \u2014 tim bisa ambil, baca, bahkan ubah proyek</li> <li>Publikasi terbuka \u2014 kode kamu bisa dikutip, disebarluaskan</li> <li>Terhubung ke layanan lain \u2014 seperti GitBook, Zenodo, dsb.</li> </ol> <p>\u2705 Syarat Sebelum Push</p> <p>Sebelum kamu push, pastikan: - Sudah punya akun GitHub (jika belum, daftar di https://github.com) - Sudah login di GitHub Desktop - Sudah membuat repositori lokal dan melakukan commit (Bab 3\u20135)</p> <p>\ud83e\udded Langkah-Langkah Push Pertama di GitHub Desktop</p> <ol> <li> <p>Buka GitHub Desktop Pilih proyek <code>riset-ku</code> yang sudah kamu buat.</p> </li> <li> <p>Klik \u201cPublish repository\u201d (pojok kanan atas) Sebuah jendela baru akan muncul.</p> </li> <li> <p>Isi pengaturan publikasi  </p> </li> <li>Name: Sesuai nama lokal (<code>riset-ku</code>)</li> <li>Description: Ringkasan proyekmu</li> <li> <p>Keep this code private: Jangan dicentang jika kamu ingin proyek ini bisa dilihat orang lain (misalnya untuk publikasi di GitBook atau Zenodo)</p> </li> <li> <p>Klik Publish Repository</p> </li> </ol> <p>Selesai! \ud83c\udf89 Proyek kamu kini sudah online, dan bisa diakses di: <code>https://github.com/username-kamu/riset-ku</code></p> <p>\ud83d\udd0d Coba Lihat Repositori Online</p> <p>Setelah push, kamu bisa: - Klik kanan nama proyek di GitHub Desktop \u2192 \u201cView on GitHub\u201d - GitHub akan membuka browser dan menampilkan halaman repositori</p> <p>Di sana, kamu akan melihat: - File README kamu tampil otomatis - Folder <code>code</code>, <code>data</code>, <code>docs</code> sudah tersusun - Commit history kamu bisa dilihat publik</p> <p>\ud83d\udcbb Apa yang Terjadi di Balik Layar?</p> <p>Saat kamu klik Publish Repository, GitHub Desktop: - Membuat repositori kosong di GitHub - Menghubungkan repositori lokal ke repositori cloud (disebut remote) - Mengirim semua commit yang sudah kamu buat</p> <p>Setelah itu, setiap kali kamu klik Push origin, semua perubahan terbaru akan disimpan ke GitHub.</p> <p>\ud83d\udd04 Push &amp; Pull: Dua Arah</p> <p>GitHub dan GitHub Desktop bekerja dua arah:</p> Aksi Arti Push Kirim perubahan dari laptop ke GitHub (online) Pull Ambil perubahan dari GitHub ke laptop (misalnya dari teman tim) <p>Untuk kerja tim, pull dulu sebelum mulai kerja, agar kamu tidak mengedit file lama.</p> <p>\ud83e\uddea Tips Aman Saat Push</p> <ul> <li>Selalu commit dulu, baru push. Kamu tidak bisa push perubahan yang belum dicatat.</li> <li>Kalau kamu bekerja dengan tim, pull dulu sebelum push, agar tidak bentrok.</li> <li>Gunakan commit message yang rapi supaya riwayat proyek mudah dibaca siapa pun.</li> </ul> <p>\u26a0\ufe0f Awas Kesalahan Umum</p> Kesalahan Solusi Push tidak bisa karena konflik Lakukan pull dulu, selesaikan konflik, lalu push Tidak muncul tombol \u201cPush\u201d Belum ada commit baru yang perlu dikirim Salah folder dipush (misalnya data besar) Tambahkan ke <code>.gitignore</code>, lalu hapus dari repo jika perlu <p>\u2705 Checklist Bab Ini</p> <ul> <li>[ ] Sudah login ke GitHub Desktop</li> <li>[ ] Klik Publish repository</li> <li>[ ] Repo muncul online di GitHub</li> <li>[ ] Sudah melihat struktur file dari browser</li> <li>[ ] Siap untuk lanjut ke kolaborasi tim</li> </ul> <p>\ud83d\ude80 Bab Selanjutnya: Menjelajahi GitHub dan Pull</p> <p>Di Bab 7, kamu akan menjelajah halaman GitHub: - Melihat commit history - Memahami peran tab Issues, Pull Requests, dan Actions - Dan belajar cara mengambil perubahan dari cloud ke lokal (pull)</p> <p>Git tidak hanya tentang menyimpan\u2014tapi juga tentang sinkronisasi cerdas.</p>"},{"location":"09-bab07/","title":"Bab 7","text":"<p>\ud83d\udd0d Bab 7  Menjelajahi GitHub dan Melakukan Pull dari Cloud</p> <p>\ud83c\udf10 GitHub: Lebih dari Sekadar Penyimpanan</p> <p>Setelah kamu berhasil melakukan push pertama ke GitHub, proyekmu sekarang sudah berada di awan. Tapi GitHub bukan hanya tempat menyimpan kode\u2014ia adalah platform kolaborasi, sistem pelacak perubahan, tempat diskusi, dan bahkan ruang publikasi terbuka untuk proyek-proyek terbuka.</p> <p>Bab ini akan memandumu menjelajahi halaman GitHub dari proyekmu, memahami fitur-fiturnya, dan mencoba melakukan pull\u2014yaitu proses mengambil perubahan dari GitHub ke laptopmu.</p> <p>\ud83e\udded Mengenal Tampilan Halaman GitHub</p> <p>Buka GitHub, lalu kunjungi halaman repositorimu: \ud83d\udcce <code>https://github.com/username-kamu/riset-ku</code></p> <p>Kamu akan melihat beberapa bagian utama:</p> <p>\ud83d\udcc4 1. File Explorer</p> <p>Halaman utama menampilkan daftar file dalam repositori kamu. Biasanya ditampilkan: - README.md (terbuka otomatis) - Folder <code>data/</code>, <code>code/</code>, <code>docs/</code> - Riwayat commit terakhir</p> <p>\ud83d\udd52 2. Tab \u201cCommits\u201d</p> <p>Klik pada tulisan <code>X commits</code> (misalnya <code>3 commits</code>) Kamu akan melihat daftar perubahan yang pernah kamu simpan: - Siapa yang melakukan - Kapan waktunya - Apa pesannya</p> <p>Klik pada commit tertentu, dan kamu bisa melihat perubahan detail, bahkan per baris!</p> <p>\ud83e\uddf5 3. Tab \u201cPull Requests\u201d</p> <p>Ini adalah tempat semua diskusi integrasi perubahan terjadi.</p> <ul> <li>Jika kamu bekerja dengan tim, semua orang akan mengajukan perubahan lewat Pull Request (PR)</li> <li>Di sini kamu bisa melihat, meninjau, dan menyetujui atau menolak perubahan</li> </ul> <p>\ud83d\udde3\ufe0f 4. Tab \u201cIssues\u201d</p> <p>Tempat mendiskusikan masalah: - Misalnya ada bug, fitur yang diusulkan, atau diskusi topik - Kamu (atau rekanmu) bisa membuka issue untuk melacak tugas-tugas tertentu</p> <p>\u2699\ufe0f 5. Tab \u201cActions\u201d dan \u201cSettings\u201d</p> <ul> <li>\u201cActions\u201d digunakan untuk otomatisasi (CI/CD) \u2014 kita belum butuh sekarang</li> <li>\u201cSettings\u201d adalah tempat mengganti nama repo, menambah kolaborator, atau menghapus repo</li> </ul> <p>\ud83d\udd04 Apa Itu Pull?</p> <p>Pull artinya mengambil semua perubahan terbaru dari GitHub (online) ke laptop kamu (lokal).</p> <p>Ini sangat penting saat: - Kamu mengedit proyek dari dua perangkat (misalnya laptop &amp; PC kampus) - Bekerja dengan tim - Ada perubahan di GitHub (misalnya edit README lewat browser)</p> <p>Jika kamu tidak melakukan pull, kamu berisiko mengerjakan versi lama proyek!</p> <p>\ud83e\uddea Praktik: Simulasi Perubahan Online</p> <p>Mari kita coba:</p> <ol> <li>Edit README.md di GitHub</li> <li>Buka <code>README.md</code> dari browser</li> <li>Klik tombol \u270f\ufe0f (ikon pensil) untuk mengedit</li> <li>Tambahkan baris: <code>Perubahan ini dilakukan langsung dari GitHub.</code></li> <li>Scroll ke bawah \u2192 beri commit message \u2192 klik \u201cCommit changes\u201d</li> </ol> <p>GitHub kini menyimpan commit baru yang tidak ada di laptop kamu.</p> <p>\ud83d\udce5 Melakukan Pull di GitHub Desktop</p> <ol> <li>Buka GitHub Desktop</li> <li>Pastikan kamu berada di repositori <code>riset-ku</code></li> <li>Klik tombol Fetch origin (pojok atas kanan)</li> <li>Jika ada perubahan, tombol Pull akan muncul    Klik Pull</li> </ol> <p>\ud83c\udf89 Sekarang file di laptop kamu sudah sinkron dengan versi GitHub!</p> <p>\ud83e\udde0 Apa Perbedaan Fetch vs Pull?</p> Aksi Fungsi Fetch Mengecek apakah ada perubahan baru di GitHub Pull Mengambil perubahan dan menggabungkannya ke folder lokal <p>Kalau tidak ada perubahan, pull tidak akan mengubah apa pun.</p> <p>\u26a0\ufe0f Waspadai Konflik saat Pull</p> <p>Kalau kamu dan rekanmu mengubah file yang sama di waktu bersamaan, Git akan memberi peringatan konflik saat pull. Tenang, GitHub Desktop akan membantumu menyelesaikannya secara visual (lebih lengkap di Bab 12 nanti).</p> <p>\ud83d\udccc Tips Pull Aman</p> <ul> <li>Selalu lakukan pull sebelum kamu mulai kerja, agar file kamu terbaru</li> <li>Biasakan fetch dulu, baru push, agar tahu apakah aman untuk lanjut</li> <li>Kalau ragu, backup file dulu sebelum pull besar</li> </ul> <p>\u2705 Checklist Bab Ini</p> <ul> <li>[ ] Sudah menjelajahi halaman GitHub repo</li> <li>[ ] Sudah mencoba mengedit file langsung di GitHub</li> <li>[ ] Sudah klik Fetch origin dan Pull di GitHub Desktop</li> <li>[ ] Sudah memahami risiko konflik</li> </ul> <p>\ud83d\ude80 Bab Selanjutnya: Branching dan Pengembangan Paralel</p> <p>Di Bab 8, kamu akan mempelajari fitur andalan Git: branching. Dengan branch, kamu bisa membuat salinan proyek sementara untuk eksperimen, tanpa takut merusak versi utama.</p> <p>Karena riset yang baik butuh ruang untuk gagal... dan Git membuat itu aman.</p>"},{"location":"10-bab08/","title":"Bab 8","text":"<p>\ud83c\udf3f Bab 8  Branching: Bekerja Paralel Tanpa Takut Merusak</p> <p>\ud83c\udf09 Mengapa Branch Itu Penting?</p> <p>Bayangkan kamu sedang menulis laporan riset. Tiba-tiba kamu ingin mencoba pendekatan analisis baru. Kamu belum yakin apakah akan berhasil, dan tentu saja kamu tidak ingin merusak dokumen utama. Apa yang kamu lakukan?</p> <p>Kalau kamu menggunakan Git, jawabannya adalah: Buat branch.</p> <p>Branch atau cabang memungkinkan kamu membuat jalur kerja baru tanpa mengganggu versi utama. Layaknya menulis di salinan buku catatan yang bisa kamu gabungkan kembali ke salinan utama kapan saja.</p> <p>Di bab ini, kita akan: - Memahami konsep branching - Membuat branch baru lewat GitHub Desktop - Melakukan perubahan terpisah - Kembali dan menggabungkan (merge) hasilnya ke versi utama</p> <p>\ud83e\udde0 Apa Itu Branch?</p> <p>Secara sederhana: Branch adalah jalur paralel dari proyek utama yang bisa kamu utak-atik tanpa mengubah isi branch utama (<code>main</code>).</p> <p>Setiap repositori Git secara default punya satu branch utama bernama <code>main</code>. Kalau kamu buat branch baru (misalnya <code>eksperimen-grafik</code>), Git akan menyalin kondisi terakhir dari <code>main</code>, dan kamu bisa bebas mengedit di sana.</p> <p>\ud83e\uddea Contoh Nyata</p> <p>Misalnya kamu sedang menganalisis data dan ingin mencoba: - Mengganti grafik dari pie chart ke bar chart - Menambahkan analisis baru</p> <p>Kamu tidak ingin merusak versi <code>main</code> yang sudah stabil. Maka kamu bisa:</p> <ol> <li>Buat branch baru: <code>grafik-baru</code></li> <li>Ubah kode sesuka hati</li> <li>Coba dan evaluasi hasilnya</li> <li>Jika sukses, kamu gabungkan kembali ke <code>main</code></li> <li>Jika gagal, cukup hapus branch \u2192 <code>main</code> tetap aman</li> </ol> <p>\ud83d\udce5 Membuat Branch di GitHub Desktop</p> <ol> <li>Buka GitHub Desktop</li> <li>Pastikan proyek <code>riset-ku</code> terbuka</li> <li>Klik menu Branch \u2192 New Branch...</li> <li>Nama branch: misalnya <code>uji-korelasi</code></li> <li>Klik Create Branch</li> </ol> <p>Secara otomatis, kamu akan berpindah ke branch tersebut. Statusnya akan terlihat di kiri atas: <code>Current branch: uji-korelasi</code></p> <p>\u270d\ufe0f Lakukan Perubahan di Branch</p> <p>Misalnya kamu: - Edit <code>code/analisis.py</code> - Tambahkan satu metode baru</p> <p>Setelah selesai: 1. Commit perubahan seperti biasa 2. (Opsional) Push ke GitHub agar branch juga tersimpan online</p> <p>\ud83d\udcc1 Melihat Semua Branch</p> <p>Di GitHub Desktop: - Klik dropdown nama branch (pojok kiri atas) - Kamu bisa berpindah ke branch lain (misalnya kembali ke <code>main</code>) - Git akan memuat ulang file sesuai isi branch yang aktif</p> <p>Catatan penting: File yang kamu lihat tergantung dari branch aktif. Jadi hati-hati saat membuka dan menyimpan file.</p> <p>\ud83d\udd04 Kembali ke Main &amp; Merge</p> <p>Setelah kamu puas dengan isi branch <code>uji-korelasi</code>, kamu bisa menggabungkannya kembali ke branch utama.</p> <p>Langkah-langkah: 1. Pindah ke branch <code>main</code> di GitHub Desktop 2. Klik Branch \u2192 Merge into current branch 3. Pilih <code>uji-korelasi</code> 4. Klik Merge</p> <p>\ud83c\udf89 Selesai! Perubahan dari <code>uji-korelasi</code> sekarang ada di <code>main</code>.</p> <p>\u2694\ufe0f Apa yang Terjadi Jika Ada Konflik?</p> <p>Kalau kamu dan tim mengedit file yang sama di dua branch berbeda, Git akan memberi tahu bahwa terjadi konflik saat merge.</p> <p>GitHub Desktop akan menampilkan tanda konflik dan memintamu memilih: - Bagian dari branch <code>main</code> - Bagian dari branch <code>uji-korelasi</code> - Atau menggabungkan secara manual</p> <p>Kita akan bahas lebih dalam soal konflik di Bab 12.</p> <p>\ud83d\udd01 Ringkasan Alur Branch</p> <ol> <li>Buat branch baru \u2192 <code>fitur-x</code></li> <li>Pindah ke branch itu</li> <li>Lakukan perubahan dan commit</li> <li>Kembali ke <code>main</code></li> <li>Merge <code>fitur-x</code> ke <code>main</code></li> </ol> <p>\ud83d\udca1 Tips Praktis</p> Tips Penjelasan Gunakan nama branch yang deskriptif Misalnya: <code>tambah-bab-metodologi</code>, <code>analisis-korelasi</code> Satu branch untuk satu fitur / percobaan Jangan kerjakan banyak hal dalam satu branch Hapus branch yang tidak dibutuhkan lagi Supaya proyek tetap bersih Push branch ke GitHub Agar tim bisa melihat atau membantu <p>\u2705 Checklist Bab Ini</p> <ul> <li>[ ] Membuat branch baru di GitHub Desktop</li> <li>[ ] Melakukan perubahan dalam branch</li> <li>[ ] Commit dan (opsional) push ke GitHub</li> <li>[ ] Pindah ke <code>main</code> dan melakukan merge</li> </ul> <p>\ud83d\ude80 Bab Selanjutnya: Penggabungan dan Penyelesaian Konflik</p> <p>Di Bab 9, kamu akan belajar lebih dalam tentang merge dan menyelesaikan konflik antar branch. Karena kadang saat dua ide bagus bertemu\u2026 mereka butuh sedikit kompromi \ud83d\ude04</p>"},{"location":"11-bab09/","title":"Bab 9","text":"<p>\ud83e\udde9 Bab 9  Menggabungkan Branch dan Menyelesaikan Konflik</p> <p>\ud83e\udde0 Mengapa Merge Itu Penting?</p> <p>Dalam bab sebelumnya, kamu telah membuat branch untuk mencoba ide baru, mengedit kode, atau menulis dokumentasi tambahan. Namun semua perubahan di branch belum memengaruhi branch utama (<code>main</code>). Untuk menjadikan hasil kerjamu bagian dari versi resmi proyek, kamu perlu menggabungkan branch\u2014itulah proses yang disebut merge.</p> <p>Merge adalah tindakan penting dalam Git karena: - Ia menyatukan kerja tim tanpa saling menimpa - Ia memperkuat semangat \u201ccoba dulu, gabung nanti\u201d - Ia memastikan proyek tetap rapi, terstruktur, dan berkembang</p> <p>Namun merge bisa menimbulkan konflik\u2014dan itu normal. Justru di sinilah kekuatan Git terlihat: ia membantu kamu menyelesaikannya dengan cara yang adil dan transparan.</p> <p>\ud83d\udd04 Apa Itu Merge?</p> <p>Merge berarti mengambil semua perubahan dari satu branch (misalnya <code>fitur-analisis</code>) dan menggabungkannya ke branch lain (biasanya <code>main</code>).</p> <p>Merge bisa dilakukan: - Setelah selesai edit di branch eksperimental - Setelah review Pull Request dari tim - Atau saat ingin menggabungkan hasil kerja kolaboratif</p> <p>\ud83d\udcda Contoh Kasus</p> <p>Misalnya kamu punya dua branch: - <code>main</code>: berisi laporan final - <code>fitur-kesimpulan</code>: kamu sedang menulis bagian kesimpulan</p> <p>Setelah kamu puas dengan isi <code>fitur-kesimpulan</code>, kamu ingin menggabungkannya ke <code>main</code>.</p> <p>\ud83d\udd27 Langkah-Langkah Merge di GitHub Desktop</p> <ol> <li> <p>Pastikan Semua Commit Sudah Dilakukan    Tidak boleh ada perubahan belum tersimpan di branch mana pun.</p> </li> <li> <p>Pindah ke Branch <code>main</code>    Di kiri atas GitHub Desktop, pilih branch <code>main</code>.</p> </li> <li> <p>Klik Menu Branch \u2192 Merge into Current Branch    Akan muncul daftar branch lain.</p> </li> <li> <p>Pilih Branch yang Ingin Digabungkan    Misalnya: <code>fitur-kesimpulan</code></p> </li> <li> <p>Klik Merge</p> </li> </ol> <p>\ud83c\udf89 Sekarang branch <code>main</code> memiliki semua isi dari <code>fitur-kesimpulan</code>.</p> <p>\u2694\ufe0f Bagaimana Jika Terjadi Konflik?</p> <p>Konflik terjadi saat: - Dua branch mengubah bagian yang sama dalam satu file - Git tidak tahu perubahan mana yang harus dipertahankan</p> <p>Contoh sederhana: - Di branch <code>main</code>, kamu tulis: <code>Hasil analisis menunjukkan tren menurun</code> - Di branch <code>fitur-kesimpulan</code>, kamu ubah jadi: <code>Hasil analisis menunjukkan tren meningkat</code></p> <p>Saat kamu merge, Git bingung dan akan menampilkan pesan conflict.</p> <p>\ud83e\udde9 Menyelesaikan Konflik di GitHub Desktop</p> <p>Saat terjadi konflik: 1. GitHub Desktop akan memberi tanda <code>Conflicted</code> di file yang bentrok. 2. Klik kanan file \u2192 Open in editor 3. Kamu akan melihat isi file seperti ini:</p> <pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; main\nHasil analisis menunjukkan tren menurun\n=======\nHasil analisis menunjukkan tren meningkat\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; fitur-kesimpulan\n</code></pre> <ol> <li>Tugasmu adalah memilih versi mana yang ingin dipertahankan, atau menggabungkan keduanya.    Misalnya:</li> </ol> <pre><code>Hasil analisis menunjukkan tren menurun di awal, namun meningkat setelah intervensi.\n</code></pre> <ol> <li> <p>Setelah selesai edit, hapus semua tanda konflik: <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code>, <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code></p> </li> <li> <p>Kembali ke GitHub Desktop \u2192 klik Mark as resolved</p> </li> <li>Klik Commit merge</li> </ol> <p>\ud83c\udf89 Konflik selesai dengan damai!</p> <p>\ud83e\udde0 Apa yang Terjadi Setelah Merge?</p> <p>Setelah merge berhasil: - Branch <code>main</code> akan memuat semua perubahan dari branch yang digabung - Kamu bisa menghapus branch lama jika tidak diperlukan lagi</p> <p>Jika kamu melakukan merge di GitHub (bukan di Desktop), biasanya melalui Pull Request dan juga menyediakan tombol \u201cMerge Pull Request\u201d.</p> <p>\ud83d\udcac Tips Menghindari Konflik</p> <ul> <li>Pull dulu sebelum edit, terutama saat kerja tim</li> <li>Gunakan branch terpisah per fitur</li> <li>Hindari edit file yang sama di dua branch</li> <li>Komunikasikan siapa mengerjakan apa</li> </ul> <p>\ud83d\udd01 Merge vs Rebase (opsional)</p> <p>Untuk pemula, merge sudah cukup. Tapi Git juga punya teknik lain: rebase, yaitu menyusun ulang histori commit agar lebih bersih.</p> <p>Dalam buku ini kita fokus pada merge karena: - Lebih mudah dipahami - Riwayat commit tetap lengkap - Cocok untuk dokumentasi riset yang transparan</p> <p>\u2705 Checklist Bab Ini</p> <ul> <li>[ ] Sudah melakukan merge dari branch ke <code>main</code></li> <li>[ ] Sudah melihat dan memahami contoh konflik</li> <li>[ ] Sudah menyelesaikan konflik dengan editor</li> <li>[ ] Sudah commit hasil merge</li> </ul> <p>\ud83d\ude80 Bab Selanjutnya: Pull Request dan Review</p> <p>Di Bab 10, kamu akan belajar cara melakukan Pull Request (PR): metode resmi untuk mengusulkan perubahan di proyek GitHub, terutama saat bekerja dalam tim atau kontribusi ke proyek orang lain.</p> <p>PR adalah dasar dari kolaborasi profesional berbasis Git. Dan kamu akan bisa melakukannya dengan percaya diri.</p>"},{"location":"12-bab10/","title":"Bab 10","text":"<p>\ud83d\udcec Bab 10  Pull Request: Mengusulkan Perubahan Secara Profesional</p> <p>\ud83e\udde0 Mengapa Pull Request Itu Penting?</p> <p>Bayangkan kamu bekerja dalam tim riset. Kamu telah membuat perubahan penting\u2014menambahkan grafik, memperbaiki kesalahan analisis, atau menyusun ulang dokumentasi. Tapi kamu tidak bisa langsung menempelkan perubahan itu ke proyek utama. Mengapa?</p> <p>Karena dalam dunia kolaborasi, setiap perubahan perlu ditinjau, diperiksa, dan disetujui terlebih dahulu. Inilah tujuan dari Pull Request (PR)\u2014cara profesional dan transparan untuk mengusulkan penggabungan perubahan dari satu branch ke branch utama (<code>main</code>).</p> <p>Pull Request bukan hanya alat teknis, tapi juga alat komunikasi dan diskusi. Ia memungkinkan kamu: - Menjelaskan apa yang kamu ubah - Mendapat umpan balik dari tim - Meningkatkan kualitas kolaborasi</p> <p>\ud83d\udccc Apa Itu Pull Request?</p> <p>Pull Request (PR) adalah permintaan resmi untuk menggabungkan branch yang kamu kerjakan ke branch utama repositori (biasanya <code>main</code>).</p> <p>PR bisa kamu kirim ke: - Proyek milikmu sendiri (jika kamu kerja solo) - Proyek tim internal (kolaborasi satu tim) - Proyek publik open-source (kontribusi ke proyek orang lain)</p> <p>\ud83e\uddea Ilustrasi Kasus</p> <p>Kamu membuat branch baru <code>tambah-analisis-usia</code> dan menulis skrip baru di <code>code/analisis_usia.py</code>.</p> <p>Setelah commit dan push branch ke GitHub, kamu ingin menyatukannya ke <code>main</code>. Tapi bukan dengan merge langsung, melainkan dengan PR, agar tim bisa melihat dulu, memberi saran, atau menyetujui perubahanmu.</p> <p>\ud83d\udd27 Langkah-Langkah Membuat Pull Request</p> <ol> <li>Push Branch ke GitHub</li> </ol> <p>Setelah kamu selesai bekerja di branch dan commit, buka GitHub Desktop:</p> <ul> <li> <p>Klik tombol Push origin untuk mengunggah branch ke GitHub</p> </li> <li> <p>Buka Repo di GitHub.com</p> </li> </ul> <p>Klik Repository \u2192 View on GitHub</p> <p>GitHub akan otomatis menampilkan banner:</p> <pre><code>Compare &amp; pull request\n</code></pre> <p>Klik tombol itu.</p> <ol> <li>Isi Detail Pull Request</li> </ol> <p>Akan muncul form berisi:</p> <ul> <li>Title: Judul PR, contoh: <code>Tambah analisis distribusi usia</code></li> <li>Description: Jelaskan perubahan yang kamu buat, misalnya: <p>\u201cMenambahkan skrip analisis_usia.py, visualisasi distribusi umur berdasarkan data.\u201d</p> </li> </ul> <p>Kamu juga bisa: - Mention orang lain: <code>@nama-teman</code> - Tautkan issue terkait: <code>Fixes 12</code></p> <ol> <li>Klik \u201cCreate Pull Request\u201d</li> </ol> <p>\ud83c\udf89 PR kamu sekarang aktif dan siap ditinjau!</p> <p>\ud83e\uddf5 Apa yang Terjadi Setelah PR Dibuat?</p> <p>GitHub akan membuat halaman khusus untuk PR kamu. Di halaman ini, tim atau kolaborator bisa:</p> <ul> <li>Melihat perbedaan file (diff view)</li> <li>Memberi komentar baris per baris</li> <li>Menyetujui atau meminta revisi</li> <li>Menyelesaikan konflik jika perlu</li> </ul> <p>Jika semua setuju, PR akan di-merge ke <code>main</code>.</p> <p>\ud83d\udc40 Review &amp; Diskusi di PR</p> <p>PR bukan hanya untuk menggabungkan kode, tapi juga: - Ajang diskusi ide - Alat pelacak progres - Tempat pembelajaran kolaboratif</p> <p>Kolaborator bisa klik tombol: - Approve: Menyetujui PR - Request changes: Meminta perbaikan dulu - Comment: Memberi masukan tanpa mengubah status</p> <p>\ud83c\udf3f Merge PR</p> <p>Jika PR kamu sudah disetujui, GitHub akan menyediakan tombol: Merge pull request</p> <p>Kamu bisa: - Langsung merge - Pilih metode merge (merge biasa, squash, atau rebase)</p> <p>Setelah merge selesai, kamu akan ditawari untuk: - Hapus branch yang sudah tidak dibutuhkan</p> <p>\ud83e\udde0 Keuntungan Menggunakan Pull Request</p> Manfaat Penjelasan \u2705 Revisi terstruktur Semua perubahan tercatat dan bisa dibatalkan jika perlu \u2705 Transparansi Siapa pun di tim bisa melihat siapa mengubah apa dan kapan \u2705 Review kolaboratif Dapat komentar, ide, atau koreksi sebelum perubahan diterima \u2705 Sejarah proyek lebih rapi PR membentuk narasi perubahan proyek secara bertahap dan logis <p>\ud83d\udca1 Tips Pull Request Profesional</p> <ul> <li>Beri nama PR yang jelas dan deskriptif</li> <li>Jelaskan tujuan dan perubahan secara ringkas</li> <li>Buat PR per fitur, jangan campur banyak topik</li> <li>Balas komentar reviewer dengan sopan dan terbuka</li> </ul> <p>\u2705 Checklist Bab Ini</p> <ul> <li>[ ] Membuat branch dan melakukan perubahan</li> <li>[ ] Commit dan push branch ke GitHub</li> <li>[ ] Mengisi detail PR dengan baik</li> <li>[ ] Mengikuti proses review dan diskusi</li> <li>[ ] Melakukan merge setelah disetujui</li> </ul> <p>\ud83d\ude80 Bab Selanjutnya: Review Pull Request dari Orang Lain</p> <p>Di Bab 11, kamu akan berperan sebagai reviewer: meninjau Pull Request orang lain, memberi komentar, dan menyetujui atau meminta revisi.</p> <p>Karena di dunia GitHub, semua orang bisa jadi kontributor\u2014dan semua orang bisa jadi pengulas yang bijak.</p>"},{"location":"13-bab11/","title":"Bab 11","text":"<p>\ud83d\udc40 Bab 11  Meninjau Pull Request dan Berkolaborasi dengan Bijak</p> <p>\ud83e\udd1d Kolaborasi Itu Lebih dari Sekadar Kode</p> <p>Jika Bab 10 membahas cara mengajukan perubahan lewat Pull Request (PR), maka Bab 11 ini akan membahas sisi sebaliknya: bagaimana meninjau dan memberi tanggapan atas perubahan yang diajukan oleh orang lain.</p> <p>Meninjau PR bukan sekadar mencari kesalahan. Ini adalah proses: - Belajar bersama - Memperbaiki kualitas proyek - Dan yang tak kalah penting: membangun budaya kolaborasi yang sehat</p> <p>Di dunia GitHub, kode bisa berubah setiap hari, tapi budaya kerja yang baik akan bertahan lebih lama dari commit mana pun.</p> <p>\ud83e\udde0 Apa Peran Reviewer?</p> <p>Sebagai reviewer, kamu adalah orang yang: - Menilai apakah perubahan yang diajukan masuk akal - Mengecek apakah tidak merusak bagian lain - Memberikan masukan yang membangun</p> <p>Kamu bukan bos yang menghakimi. Kamu adalah rekan yang membantu menjaga arah dan mutu proyek.</p> <p>\ud83e\udded Menemukan dan Membuka Pull Request</p> <ol> <li>Buka halaman proyek GitHub  </li> <li> <p>Klik tab Pull requests    Di sini akan ditampilkan semua PR terbuka.</p> </li> <li> <p>Klik salah satu PR untuk membukanya    Kamu akan masuk ke halaman detail PR tersebut.</p> </li> </ol> <p>\ud83d\udd0d Meninjau Perubahan</p> <p>Di halaman PR, ada beberapa bagian penting:</p> <p>\ud83d\udcc4 \u201cConversation\u201d - Tempat penjelasan PR dan komentar umum - Di sinilah diskusi utama terjadi</p> <p>\ud83e\uddf5 \u201cCommits\u201d - Menampilkan commit yang termasuk dalam PR</p> <p>\ud83e\uddec \u201cFiles changed\u201d - Menampilkan semua perbedaan file (diff)   Bagian ini yang paling penting untuk review teknis</p> <p>\u270f\ufe0f Memberi Komentar Baris demi Baris</p> <p>Saat meninjau kode di tab Files changed, kamu bisa: - Klik ikon \u2795 di samping baris kode - Menuliskan komentar, pertanyaan, atau saran</p> <p>Contoh:</p> <p>\"Mungkin variabel ini bisa diberi nama yang lebih deskriptif?\"</p> <p>Setelah selesai menulis komentar, klik Start a review atau Add single comment.</p> <p>\ud83e\udded Menyelesaikan Review</p> <p>Setelah meninjau semua perubahan, klik tombol Review changes (kanan atas). Kamu akan diberi tiga opsi:</p> Opsi Fungsi Comment Memberi masukan tanpa menyetujui atau menolak Approve Menyetujui perubahan dan siap untuk di-merge Request changes Meminta pengajuan untuk diperbaiki dulu sebelum di-merge <p>Pilih salah satu dan klik Submit review.</p> <p>\ud83d\udca1 Etika Saat Review</p> <p>Meninjau PR itu seperti berdiskusi di ruang kelas: sopan, jujur, dan saling menghargai.</p> <p>Berikut beberapa pedoman: - Hindari komentar bersifat pribadi (\u201ckenapa kamu begini sih?\u201d) - Fokus pada solusi, bukan menyalahkan - Beri apresiasi jika ada hal baik yang dilakukan - Tawarkan saran, bukan perintah</p> <p>Contoh komentar baik: - \u201cKeren! Logika ini bisa disederhanakan, coba pakai list comprehension?\u201d - \u201cKalau boleh saran, bagian ini bisa dipindah ke fungsi terpisah agar lebih rapi.\u201d</p> <p>\ud83d\udee0\ufe0f Setelah Revisi: Menyetujui dan Merge</p> <p>Jika pengaju PR sudah melakukan revisi, kamu bisa: 1. Cek kembali perubahannya 2. Submit Approve 3. Klik Merge pull request</p> <p>Setelah merge selesai: - Branch PR bisa dihapus - Perubahan akan muncul di <code>main</code></p> <p>Kamu juga bisa menandai PR sebagai \u201cmerged\u201d secara manual jika kamu punya akses.</p> <p>\ud83d\udcac Kenapa Review Itu Krusial dalam Riset?</p> <p>Dalam konteks riset: - PR adalah tempat menyempurnakan metode - Review menjaga ketelitian dan kejelasan dokumentasi - Komentar bisa menjadi rekam jejak argumentasi analisis</p> <p>Dengan kata lain, review di PR membantu menjaga integritas ilmiah.</p> <p>\u2705 Checklist Bab Ini</p> <ul> <li>[ ] Sudah membuka halaman PR orang lain</li> <li>[ ] Meninjau perbedaan file di tab \u201cFiles changed\u201d</li> <li>[ ] Menulis komentar dengan bahasa yang sopan dan jelas</li> <li>[ ] Menyelesaikan review dengan <code>Approve</code> atau <code>Request changes</code></li> <li>[ ] Merge PR jika sudah siap</li> </ul> <p>\ud83d\ude80 Bab Selanjutnya: Berkontribusi ke Proyek Open-Source</p> <p>Di Bab 12, kamu akan mencoba sesuatu yang lebih besar: kontribusi ke proyek publik di luar milikmu sendiri, lewat fitur fork dan PR lintas repositori.</p> <p>Ini adalah awal dari peran kamu sebagai kontributor open-source dunia nyata.</p>"},{"location":"14-bab12/","title":"Bab 12","text":"<p>\ud83c\udf0d Bab 12  Kontribusi ke Proyek Open Source dengan Fork dan Pull Request</p> <p>\u2728 Dari Belajar ke Berkontribusi</p> <p>Selama sebelas bab sebelumnya, kamu telah belajar cara mengelola proyek Git sendiri: membuat repo, menulis dokumentasi, melakukan commit, branch, merge, dan review.</p> <p>Tapi kini waktunya untuk melangkah keluar dari proyek pribadi dan memasuki dunia yang lebih besar: open source.</p> <p>Open source bukan hanya soal berbagi kode, tapi soal berbagi pengetahuan, membangun komunitas, dan belajar dari proyek nyata. Dalam bab ini, kamu akan belajar cara berkontribusi ke proyek GitHub milik orang lain melalui dua langkah utama: fork dan pull request.</p> <p>\ud83d\udd0d Apa Itu Fork?</p> <p>Fork adalah tindakan menyalin sebuah repository dari akun orang lain ke akun GitHub kamu sendiri.</p> <p>Mengapa perlu fork? Karena kamu tidak punya akses langsung untuk mengubah repo orang lain. Dengan fork, kamu bisa: - Membuat salinan repo - Mengedit tanpa memengaruhi repo asli - Lalu mengirim pull request (PR) agar pemilik repo bisa meninjau kontribusimu</p> <p>\ud83e\uddea Ilustrasi Nyata</p> <p>Misalnya kamu menemukan repositori GitHub berisi materi pembelajaran statistika. Kamu melihat ada salah ketik di README atau ingin menambahkan contoh penggunaan.</p> <p>Kamu tidak bisa langsung mengubah file tersebut. Tapi kamu bisa: 1. Fork repo ke akunmu 2. Edit dan commit perubahan 3. Kirim PR ke repo asli agar pemiliknya bisa mempertimbangkan kontribusimu</p> <p>\ud83d\udd27 Langkah-Langkah Fork dan Kontribusi</p> <ol> <li>Temukan Repo Publik di GitHub</li> </ol> <p>Coba buka contoh ini: \ud83d\udd17 https://github.com/kodekoding/belajar-gitbook</p> <p>Ini adalah repo publik yang bisa kamu fork.</p> <ol> <li>Klik Tombol \u201cFork\u201d</li> </ol> <p>Di kanan atas halaman repo, klik Fork. GitHub akan membuat salinan proyek ke akun kamu, misalnya: <code>https://github.com/akun-kamu/belajar-gitbook</code></p> <p>\ud83c\udf89 Sekarang kamu punya repo pribadi yang identik dengan aslinya.</p> <p>\ud83d\udcbb 3. Clone Repo Fork ke GitHub Desktop</p> <ol> <li>Buka GitHub Desktop</li> <li>Klik File \u2192 Clone Repository</li> <li>Pilih tab GitHub.com</li> <li>Pilih repo hasil fork (<code>belajar-gitbook</code>) \u2192 klik Clone</li> </ol> <p>Sekarang repo tersebut sudah ada di laptop kamu.</p> <p>\ud83e\uddf1 4. Buat Branch untuk Perubahanmu</p> <p>Jangan langsung edit di <code>main</code>. Buat branch baru agar rapi.</p> <ol> <li>Klik Branch \u2192 New Branch</li> <li>Misalnya beri nama <code>perbaiki-readme</code></li> <li>Klik Create Branch</li> </ol> <p>\ud83d\udcdd 5. Lakukan Perubahan</p> <p>Buka file yang ingin kamu perbaiki. Misalnya, edit <code>README.md</code> dan ganti:</p> <pre><code>Belajaar Git dengan GitBook\n</code></pre> <p>Menjadi:</p> <pre><code>Belajar Git dengan GitBook\n</code></pre> <p>Simpan perubahan dan commit seperti biasa di GitHub Desktop.</p> <p>\u2b06\ufe0f 6. Push dan Kirim Pull Request ke Repo Asli</p> <ol> <li>Klik Push origin di GitHub Desktop</li> <li>Kembali ke browser \u2192 buka repo fork kamu</li> <li>Klik tombol \u201cContribute\u201d \u2192 \u201cOpen pull request\u201d</li> </ol> <p>GitHub akan otomatis mendeteksi bahwa kamu ingin menggabungkan: - Dari: <code>akun-kamu/perbaiki-readme</code> - Ke: <code>kodekoding/main</code></p> <p>Isi judul dan deskripsi, lalu klik Create Pull Request</p> <p>\ud83c\udf89 Kamu baru saja mengirim kontribusi ke proyek open source!</p> <p>\ud83d\udc40 Apa yang Terjadi Selanjutnya?</p> <p>Pemilik repo akan menerima notifikasi PR. Mereka bisa: - Memberi komentar - Meminta perbaikan - Atau langsung menggabungkan perubahan kamu</p> <p>Jika diterima, nama kamu akan muncul di daftar kontributor. Kecil? Mungkin. Tapi itulah langkah awal dalam kontribusi dunia nyata.</p> <p>\ud83e\udde0 Kontribusi Tidak Harus Besar</p> <p>Kontribusi open source bisa berupa: - Memperbaiki typo - Menambahkan penjelasan yang lebih baik - Menulis tutorial - Menambahkan contoh penggunaan kode</p> <p>Tidak perlu langsung jadi master! Yang penting: niat berbagi dan belajar bersama.</p> <p>\u2705 Checklist Bab Ini</p> <ul> <li>[ ] Fork repo publik ke akun sendiri</li> <li>[ ] Clone hasil fork ke GitHub Desktop</li> <li>[ ] Membuat branch dan melakukan perubahan</li> <li>[ ] Commit dan push perubahan</li> <li>[ ] Mengirim Pull Request ke repo asli</li> </ul> <p>\ud83d\ude80 Bab Selanjutnya: Menyusun Dokumentasi di GitBook</p> <p>Setelah kamu terbiasa berbagi di GitHub, saatnya menyusun dokumentasi yang bisa dibaca seperti buku digital.</p> <p>Di Bab 13, kamu akan mengenal GitBook\u2014alat yang mengubah folder <code>docs/</code> kamu menjadi buku interaktif.</p>"},{"location":"15-bab13/","title":"Bab 13","text":"<p>\ud83d\udcd6 Bab 13  Menyusun Dokumentasi Proyek Riset Menggunakan GitBook</p> <p>\ud83d\udcda Dokumentasi Itu Penting</p> <p>Dalam dunia riset dan pengembangan digital, dokumentasi adalah seperti papan penunjuk jalan\u2014tanpanya, bahkan proyek paling canggih bisa membingungkan, bahkan oleh pembuatnya sendiri. Dokumentasi bukan hanya pelengkap; ia adalah penghubung antara ide dan pemahaman, antara data dan dampak.</p> <p>Setelah kamu menyusun struktur proyek dengan rapi dan membagikannya lewat GitHub, kini saatnya membuatnya mudah dibaca, indah dilihat, dan terstruktur seperti buku digital.</p> <p>Di sinilah GitBook berperan.</p> <p>\ud83c\udf10 Apa Itu GitBook?</p> <p>GitBook adalah platform online yang mengubah file Markdown (.md) menjadi buku digital interaktif, lengkap dengan navigasi bab, pencarian, dan tampilan profesional.</p> <p>GitBook sangat cocok untuk: - Dokumentasi riset - Modul belajar mandiri - Panduan penggunaan aplikasi - Catatan proyek kolaboratif</p> <p>Dengan GitBook, kamu bisa menampilkan isi folder <code>docs/</code> dari repositori GitHub kamu sebagai sebuah buku digital, tanpa perlu menulis HTML, CSS, atau membuat desain dari nol.</p> <p>\ud83d\udd27 Persiapan Awal: Struktur <code>docs/</code></p> <p>Sebelum menggunakan GitBook, pastikan kamu sudah memiliki struktur folder <code>docs/</code> dalam repositori GitHub-mu. Misalnya:</p> <pre><code>docs/\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 latar-belakang.md\n\u251c\u2500\u2500 metode.md\n\u251c\u2500\u2500 analisis.md\n\u2514\u2500\u2500 kesimpulan.md\n</code></pre> <p>File-file ini akan otomatis menjadi bab-bab buku di GitBook.</p> <p>\ud83d\udcdd Gunakan format Markdown untuk menulis: <code>Judul</code>, <code>Subjudul</code>, <code>- daftar</code>, dan sebagainya.</p> <p>\ud83e\udded Langkah-Langkah Menggunakan GitBook</p> <ol> <li> <p>Buat Akun GitBook</p> </li> <li> <p>Buka https://app.gitbook.com</p> </li> <li>Klik Sign up</li> <li> <p>Pilih metode login (GitHub, Google, email)</p> </li> <li> <p>Hubungkan ke GitHub</p> </li> </ol> <p>Setelah login: - Klik New space \u2192 Import from GitHub - GitBook akan minta izin akses ke akun GitHub kamu - Pilih repo yang ingin kamu tampilkan (misalnya <code>riset-ku</code>)</p> <ol> <li>Pilih Folder <code>docs/</code> Sebagai Sumber</li> </ol> <p>GitBook akan membaca isi folder dan menampilkannya sebagai struktur buku. Jika file <code>docs/README.md</code> ada, itu akan menjadi halaman pertama buku.</p> <p>\ud83d\udcd6 Menyusun Bab dan Navigasi</p> <p>GitBook memungkinkan kamu: - Menyusun urutan bab - Menambahkan judul dan subjudul - Menautkan antarhalaman - Menambahkan gambar dan grafik</p> <p>Semua ini bisa kamu atur dari panel navigasi GitBook (sidebar kiri).</p> <p>Kamu bisa klik dan tarik untuk menyusun ulang urutan bab. Jika ingin menambahkan halaman baru, cukup klik \u201c+ Add page\u201d atau edit langsung file <code>.md</code> di GitHub.</p> <p>\ud83d\udd04 Sinkronisasi Otomatis dengan GitHub</p> <p>Setiap kali kamu melakukan: - Perubahan isi <code>.md</code> di <code>docs/</code> - Commit dan push ke GitHub</p> <p>GitBook akan secara otomatis memperbarui tampilan bukumu!</p> <p>Ini sangat berguna untuk proyek yang terus berkembang. Tidak perlu salin-tempel ke platform lain. Cukup ubah di GitHub Desktop, dan GitBook akan mengurus sisanya.</p> <p>\u2728 Tampilan Profesional, Tanpa Coding</p> <p>Beberapa fitur menarik GitBook: - Navigasi samping yang rapi - Tema gelap dan terang otomatis - Pencarian instan di seluruh isi buku - URL publik yang bisa dibagikan ke siapa saja</p> <p>Contoh:</p> <pre><code>https://nama-kamu.gitbook.io/riset-ku/\n</code></pre> <p>Ini bisa kamu sertakan dalam CV, publikasi ilmiah, atau bahkan sebagai bahan ajar.</p> <p>\ud83e\udde0 Tips Penulisan Dokumentasi yang Baik</p> Tips Penjelasan Gunakan bahasa yang ringkas Hindari paragraf terlalu panjang Gunakan daftar (bullet/numbered) Membantu keterbacaan Tambahkan contoh penggunaan Jika kamu menulis dokumentasi kode atau metode Gunakan visual Grafik, diagram, atau tabel akan memperjelas isi Periksa konsistensi format Judul, subjudul, dan penomoran <p>\u2705 Checklist Bab Ini</p> <ul> <li>[ ] Sudah memiliki struktur folder <code>docs/</code></li> <li>[ ] Sudah menulis file Markdown untuk tiap bab</li> <li>[ ] Sudah punya akun GitBook</li> <li>[ ] Sudah menghubungkan ke repo GitHub</li> <li>[ ] Sudah melihat hasil dokumentasi sebagai buku digital</li> </ul> <p>\ud83d\ude80 Bab Selanjutnya: Memoles Dokumentasi dan Menyiapkannya untuk Publikasi</p> <p>Di Bab 14, kamu akan belajar cara memoles tampilan GitBook, menambahkan referensi, lisensi, dan DOI. Karena dokumentasi yang baik tidak hanya lengkap, tapi juga siap dibaca oleh dunia.</p>"},{"location":"16-bab14/","title":"Bab 14","text":"<p>\ud83c\udfa8 Bab 14  Memoles Dokumentasi GitBook agar Siap Dipublikasikan</p> <p>\ud83d\udcd6 Dokumentasi yang Tidak Hanya Lengkap, Tapi Menarik</p> <p>Setelah kamu menyusun dokumentasi dalam GitBook, kamu mungkin merasa puas: strukturnya jelas, isinya rapi, dan semua bab sudah tertulis. Tapi pertanyaannya: Apakah dokumentasimu siap dibaca oleh orang lain?</p> <p>Di bab ini, kita akan belajar cara memoles tampilan dan isi GitBook agar layak dibaca oleh: - Pembimbing skripsi - Mitra riset - Reviewer jurnal - Atau bahkan pembaca umum yang baru pertama kali mengenal proyekmu</p> <p>Ingat: tampilan memengaruhi persepsi. Dokumentasi yang menarik secara visual dan jelas secara isi akan lebih dipercaya, lebih dihargai, dan lebih sering dirujuk.</p> <p>\ud83e\udded Langkah-Langkah Memoles Dokumentasi</p> <ol> <li>Periksa dan Perbaiki Judul Bab</li> </ol> <p>Gunakan judul yang padat dan bermakna. Contoh:</p> Sebelum Sesudah Bab 1 1. Pendahuluan: Latar Belakang Penelitian Bab 2 2. Metodologi: Desain dan Alur Analisis Bab 3 3. Hasil: Visualisasi dan Temuan <p>Tips: Gunakan angka di depan judul untuk navigasi yang lebih mudah.</p> <ol> <li>Tambahkan Gambar dan Grafik (Jika Ada)</li> </ol> <p>GitBook mendukung penambahan gambar dalam Markdown:</p> <pre><code>![Deskripsi gambar](../assets/gambar1.png)\n</code></pre> <p>Kamu bisa menyimpan gambar di folder <code>docs/assets/</code> agar struktur tetap rapi.</p> <p>Gunakan grafik untuk: - Menjelaskan metode - Menyajikan hasil analisis - Memberi konteks</p> <p>\ud83d\udccc Gambar = penyelamat pembaca visual!</p> <ol> <li>Sisipkan Daftar Isi Manual (Opsional)</li> </ol> <p>GitBook membuat sidebar otomatis, tapi kamu juga bisa membuat daftar isi di halaman pembuka (<code>README.md</code>):</p> <pre><code> Daftar Isi\n\n1. [Pendahuluan](latar-belakang.md)\n2. [Metodologi](metode.md)\n3. [Hasil](analisis.md)\n4. [Kesimpulan](kesimpulan.md)\n</code></pre> <p>Gunakan link relatif agar pembaca bisa melompat antar bab.</p> <ol> <li>Tambahkan Lisensi dan Attribution</li> </ol> <p>Di akhir dokumentasi (atau halaman khusus), tambahkan bagian lisensi:</p> <pre><code> Lisensi\n\nProyek ini dilisensikan di bawah MIT License.  \nBebas digunakan, disalin, dan dimodifikasi dengan atribusi yang sesuai.\n</code></pre> <p>Atau untuk dokumentasi:</p> <pre><code>Dokumen ini menggunakan lisensi Creative Commons Attribution 4.0 (CC BY 4.0).\n</code></pre> <p>Jangan lupa sertakan: - Nama kontributor - Tahun publikasi - Link ke repo GitHub</p> <ol> <li>Tambahkan Referensi (Daftar Pustaka)</li> </ol> <p>Jika dokumentasi merujuk ke: - Literatur ilmiah - Kode eksternal - Artikel akademik</p> <p>Buatlah halaman khusus referensi:</p> <pre><code> Referensi\n\n1. Chacon, S., &amp; Straub, B. (2014). Pro Git (2nd ed.). Apress.  \n   [https://git-scm.com/book/en/v2](https://git-scm.com/book/en/v2)\n\n2. P\u00e9rez-Rodr\u00edguez, F. et al. (2020). GitBook as an Educational Tool. Education Sciences.\n</code></pre> <p>Bisa juga menggunakan numerik, APA, atau gaya bebas yang konsisten.</p> <ol> <li>Tambahkan DOI dan Badge</li> </ol> <p>Jika proyekmu telah dipublikasikan melalui Zenodo dan mendapatkan DOI, tampilkan badge di awal dokumentasi:</p> <pre><code>[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.1234567.svg)](https://doi.org/10.5281/zenodo.1234567)\n</code></pre> <p>Badge ini membuat proyekmu: - Lebih kredibel - Bisa dikutip sebagai karya ilmiah</p> <ol> <li>Cek Tampilan di Mode Gelap &amp; Terang</li> </ol> <p>GitBook mendukung dark mode secara otomatis. Pastikan warna grafik atau gambar tetap terlihat baik di dua mode tampilan.</p> <p>\u2728 Bonus: Gaya Bahasa &amp; Nada</p> <ul> <li>Gunakan nada akademis tapi tidak terlalu kaku</li> <li>Hindari kalimat panjang yang bertele-tele</li> <li>Sisipkan transisi antar bab agar narasi terasa mengalir</li> </ul> <p>Contoh transisi:</p> <p>\u201cSetelah membahas metodologi, kini kita akan beralih ke temuan hasil analisis yang kami lakukan.\u201d</p> <p>\u2705 Checklist Bab Ini</p> <ul> <li>[ ] Semua judul bab sudah jelas dan berurutan</li> <li>[ ] Gambar, grafik, atau visual pendukung ditambahkan</li> <li>[ ] Lisensi dan attribution tercantum dengan benar</li> <li>[ ] Referensi ilmiah disusun rapi di halaman khusus</li> <li>[ ] DOI dari Zenodo ditampilkan di awal dokumentasi</li> <li>[ ] Link antar halaman dan daftar isi diperiksa</li> <li>[ ] Tampilan sudah baik di dark mode dan light mode</li> </ul> <p>\ud83d\ude80 Bab Selanjutnya: Sinkronisasi dan Versi Final</p> <p>Di Bab 15, kamu akan belajar menyimpan versi akhir dari dokumentasi dan proyekmu ke platform repositori ilmiah seperti Zenodo, untuk mendapatkan DOI resmi dan mempublikasikannya secara terbuka.</p> <p>GitBook mempercantik isi. Zenodo mengabadikannya.</p>"},{"location":"17-bab15/","title":"Bab 15","text":"<p>\ud83e\uddfe Bab 15  Sinkronisasi Proyek Riset ke Zenodo untuk Publikasi Final dan DOI</p> <p>\ud83d\udce2 Saatnya Memublikasikan Karyamu</p> <p>Setelah berjam-jam menyusun struktur repositori, menulis kode, menata dokumentasi, dan menghubungkannya ke GitBook\u2014kamu kini berada di tahap akhir: mempublikasikan risetmu secara terbuka dan profesional.</p> <p>Bayangkan kamu menulis laporan luar biasa, tapi disimpan di laci meja. Tidak ada yang membacanya. Tidak ada yang bisa mengutipnya. Tidak ada dampaknya.</p> <p>Tapi jika kamu menerbitkannya secara terbuka, memberikan DOI (Digital Object Identifier), dan mencantumkannya dalam jurnal atau CV, maka kamu mengubah proyek pribadi menjadi kontribusi nyata untuk ilmu pengetahuan.</p> <p>Inilah misi utama bab ini: menghubungkan GitHub ke Zenodo dan membuat versi final risetmu dapat diakses dunia.</p> <p>\ud83c\udf10 Apa Itu Zenodo?</p> <p>Zenodo adalah layanan repositori ilmiah gratis dan terbuka yang dibuat oleh CERN dan OpenAIRE. Tujuannya: - Menyimpan proyek, dataset, dokumen, dan kode ilmiah - Memberikan DOI untuk setiap versi rilis - Memfasilitasi open access bagi peneliti dan pengembang di seluruh dunia</p> <p>Zenodo cocok untuk: - Menyimpan repositori GitHub versi akhir - Menyediakan DOI untuk digunakan dalam jurnal atau laporan - Menjaga transparansi dan reproducibility riset</p> <p>\ud83e\udded Langkah-Langkah Sinkronisasi GitHub ke Zenodo</p> <ol> <li> <p>Buat Akun Zenodo</p> </li> <li> <p>Buka https://zenodo.org</p> </li> <li>Klik Sign up</li> <li> <p>Gunakan akun GitHub, ORCiD, atau email</p> </li> <li> <p>Hubungkan Zenodo ke GitHub</p> </li> <li> <p>Setelah login, klik ikon profil kanan atas \u2192 GitHub</p> </li> <li>Beri izin akses ke akun GitHub kamu</li> <li> <p>Zenodo akan menampilkan daftar repositori kamu</p> </li> <li> <p>Aktifkan Sinkronisasi Repo</p> </li> <li> <p>Temukan repo <code>riset-ku</code> </p> </li> <li>Aktifkan toggle di sampingnya (<code>\u2714\ufe0f Enable</code>)</li> <li>Zenodo sekarang akan memantau repo tersebut</li> </ol> <p>\ud83d\udd16 4. Buat Release di GitHub</p> <p>Agar Zenodo mengarsipkan repo, kamu perlu membuat Release.</p> <p>Caranya: 1. Buka halaman GitHub \u2192 klik tab Releases 2. Klik Draft a new release 3. Isi:    - Tag version: misalnya <code>v1.0</code>    - Release title: \u201cVersi Final Proyek Riset\u201d    - Deskripsi: ringkasan isi proyek 4. Klik Publish release</p> <p>\ud83c\udf89 Zenodo akan otomatis: - Menyalin isi repositori pada saat itu - Menyimpan file <code>.zip</code> dari semua kode dan dokumen - Menghasilkan DOI unik</p> <p>\ud83d\udd17 DOI: Kode Akses ke Ilmu Pengetahuan</p> <p>DOI (Digital Object Identifier) adalah identitas permanen untuk sebuah objek digital. Contoh DOI dari Zenodo:</p> <pre><code>10.5281/zenodo.1234567\n</code></pre> <p>Dengan DOI ini, kamu bisa: - Menyisipkan kutipan ilmiah - Menautkan GitBook ke arsip Zenodo - Menyediakan rujukan di jurnal atau laporan</p> <p>Kamu juga mendapatkan: - DOI per versi (misalnya <code>v1.0</code>, <code>v1.1</code>) - DOI induk yang merepresentasikan proyek secara keseluruhan</p> <p>\ud83e\uddec Menyusun Metadata di Zenodo</p> <p>Setelah rilis pertama, kamu bisa masuk ke Zenodo dan: - Menambahkan deskripsi panjang - Memasukkan penulis (dengan ORCiD jika ada) - Menyusun kata kunci (keywords) - Menentukan lisensi (MIT, CC-BY, dll) - Menyematkan link ke GitBook</p> <p>Semua ini membuat proyek kamu: - Lebih mudah ditemukan di Google Scholar - Terlihat kredibel di mata pembaca akademik</p> <p>\ud83e\udde0 Tips: Kapan Sebaiknya Rilis?</p> <ul> <li>Setelah kamu menyusun dokumentasi final</li> <li>Setelah file sudah ditinjau ulang (tidak ada typo besar)</li> <li>Saat kamu siap membagikannya ke dosen, reviewer, atau publik</li> </ul> <p>Ingat: kamu bisa membuat versi baru (v1.1, v2.0) kapan saja jika ada perubahan. Zenodo akan menyimpan semuanya, lengkap dengan DOI baru.</p> <p>\ud83d\udccb Contoh Kutipan Proyek</p> <p>Jika kamu ingin orang lain mengutip proyekmu, gunakan format seperti ini:</p> <pre><code>Nama, A. (2025). Riset XYZ (v1.0) [Dataset dan Kode]. Zenodo. https://doi.org/10.5281/zenodo.1234567\n</code></pre> <p>Tambahkan kutipan ini di: - GitBook (<code>README.md</code>) - Proposal riset - Skripsi atau artikel ilmiah</p> <p>\u2705 Checklist Bab Ini</p> <ul> <li>[ ] Sudah punya akun Zenodo</li> <li>[ ] Sudah menghubungkan ke GitHub</li> <li>[ ] Sudah mengaktifkan repo <code>riset-ku</code></li> <li>[ ] Sudah membuat release di GitHub</li> <li>[ ] Sudah mendapatkan DOI</li> <li>[ ] Sudah menambahkan metadata dan lisensi</li> </ul> <p>\ud83d\ude80 Bab Selanjutnya: Finalisasi &amp; Presentasi Proyek</p> <p>Di Bab 16, kita akan menutup sesi ini dengan membuat dokumentasi akhir proyek, menyusun versi siap tampil untuk publik, dan merangkum seluruh proses belajar Git dalam 24 jam.</p> <p>Karena proyek yang baik bukan hanya selesai, tapi siap dibagikan dengan percaya diri.</p>"},{"location":"18-bab16/","title":"Bab 16","text":"<p>\ud83c\udf93 Bab 16  Finalisasi Proyek dan Menyusun Presentasi Akhir</p> <p>\ud83c\udfc1 Akhir yang Baik adalah Awal dari Dampak</p> <p>Selamat! Jika kamu telah sampai di bab ini, artinya kamu sudah melewati 15 bab sebelumnya dengan konsisten. Kamu telah membangun, menulis, menyusun, dan menerbitkan proyek risetmu menggunakan Git, GitHub, GitBook, dan Zenodo. Itu bukan pekerjaan kecil\u2014itu adalah kerja seorang ilmuwan digital abad ke-21.</p> <p>Tapi satu hal masih tersisa: bagaimana kamu menutup perjalanan ini dengan rapi dan menyiapkannya untuk dibagikan kepada publik, dosen, penguji, rekan kerja, atau dunia?</p> <p>Bab ini akan memandu kamu: - Menyusun versi final proyek yang siap dibagikan - Menyiapkan ringkasan presentasi - Menyusun halaman depan dan akhir dokumentasi - Dan merayakan capaianmu dengan percaya diri</p> <p>\ud83d\udce6 1. Merapikan Isi Repositori</p> <p>Sebelum mengirim atau menampilkan proyekmu, pastikan repositori GitHub kamu sudah bersih dan tertata:</p> <p>Cek Struktur Folder</p> <pre><code>riset-ku/\n\u251c\u2500\u2500 data/            \u2190 Dataset yang digunakan (tanpa data sensitif)\n\u251c\u2500\u2500 code/            \u2190 Script analisis dan pemrosesan\n\u251c\u2500\u2500 docs/            \u2190 File Markdown untuk GitBook\n\u251c\u2500\u2500 LICENSE          \u2190 Informasi lisensi proyek\n\u251c\u2500\u2500 README.md        \u2190 Ringkasan proyek\n\u2514\u2500\u2500 .gitignore       \u2190 File untuk menyaring file tidak penting\n</code></pre> <p>Hapus File yang Tidak Perlu - File sementara, draft mentah, file hasil uji coba - File pribadi, log, atau catatan lokal</p> <p>Pastikan Semua Sudah Dicommit dan Didorong (Push) - Tidak ada perubahan lokal yang tertinggal - Semua file penting ada di GitHub</p> <p>\ud83d\udcd8 2. Menyusun Halaman Pembuka dan Penutup GitBook</p> <p>Halaman Pembuka (README.md) Berisi: - Judul proyek - Penjelasan singkat - Tautan ke DOI Zenodo - Tautan ke halaman GitBook publik - Badge lisensi dan DOI</p> <p>Contoh:</p> <pre><code> Analisis Data Sosial Berbasis Git\n\nDokumentasi ini menyajikan proses riset terbuka menggunakan GitHub, GitBook, dan Zenodo.\n\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.1234567.svg)](https://doi.org/10.5281/zenodo.1234567)\n\n\u27a1\ufe0f [Lihat versi buku digital](https://nama-kamu.gitbook.io/riset-ku/)\n</code></pre> <p>Halaman Penutup Bisa berisi: - Ucapan terima kasih - Tautan feedback atau Google Form - Rencana lanjutan proyek</p> <p>\ud83d\uddbc\ufe0f 3. Membuat Slide Presentasi</p> <p>Presentasi adalah versi ringkas dari proyekmu. Gunakan 5\u20137 slide saja, misalnya:</p> <ol> <li> <p>Judul dan Identitas    Nama proyek, nama kamu, tanggal</p> </li> <li> <p>Latar Belakang dan Tujuan</p> </li> <li> <p>Metodologi Riset</p> </li> <li> <p>Hasil Utama</p> </li> <li> <p>Platform &amp; Tools    Git, GitHub, GitBook, Zenodo</p> </li> <li> <p>Tautan Akses    Sertakan QR Code ke GitBook &amp; Zenodo</p> </li> <li> <p>Penutup dan Saran Lanjutan</p> </li> </ol> <p>\ud83c\udf81 Bonus: Tambahkan screenshot dari GitBook dan halaman Zenodo agar terlihat profesional</p> <p>\ud83d\udce4 4. Bagikan Proyekmu</p> <p>Sekarang kamu bisa membagikan dokumentasi dan repositori kamu ke: - Dosen pembimbing - Komunitas riset (lewat Twitter, LinkedIn, dll.) - Forum akademik - Jurnal open access (jika relevan)</p> <p>Pastikan kamu menggunakan tautan yang bisa diakses publik: - GitHub: <code>https://github.com/namamu/riset-ku</code> - GitBook: <code>https://namamu.gitbook.io/riset-ku</code> - Zenodo: <code>https://doi.org/10.5281/zenodo.1234567</code></p> <p>\ud83c\udfaf 5. Refleksi: Apa yang Kamu Pelajari?</p> <p>Coba renungkan sejenak. Dari tidak mengenal Git sama sekali, sekarang kamu: - Bisa menyusun struktur proyek riset digital - Mengelola versi, konflik, dan kolaborasi - Menyusun dokumentasi profesional - Mempublikasikan karya dengan DOI</p> <p>Itu bukan sekadar \"belajar Git\"\u2014itu adalah transformasi digital dalam cara kamu bekerja dan berpikir.</p> <p>\u2705 Checklist Bab Ini</p> <ul> <li>[ ] Struktur folder rapi dan siap dibagikan</li> <li>[ ] GitBook memiliki halaman pembuka dan penutup</li> <li>[ ] Slide presentasi dibuat untuk pengujian / seminar</li> <li>[ ] Tautan GitHub, GitBook, dan Zenodo siap digunakan</li> <li>[ ] Kamu tahu bagaimana menjelaskan proyek ini ke orang lain</li> </ul> <p>\ud83c\udfc1 Penutup Buku: Dari Nol ke Git Hero</p> <p>Kamu telah menempuh perjalanan 24 jam belajar Git\u2014dan kamu berhasil.</p> <p>Proyek risetmu sekarang: - Terstruktur - Terdokumentasi - Terpublikasi - Siap dikutip dan dikembangkan</p> <p>Langkah selanjutnya terserah kamu: melanjutkan proyek baru, mengajar orang lain, atau bahkan berkontribusi ke komunitas open source.</p> <p>Git bukan tujuan. Git adalah alat untuk perjalanan ilmiah yang terbuka, reproducible, dan kolaboratif.</p>"},{"location":"19-pengantar-reflek/","title":"Pengantar Refleksi","text":"<p>\ud83d\udcd8 Pengantar Bagian Reflektif  </p> <p>\u201cSaat Git Tak Lagi Soal Kode\u201d</p> <p>Jika bagian awal buku ini mengajakmu mengetik, meng-commit, dan menarik-push segala hal ke awan, maka bagian ini justru mengajakmu menarik diri sejenak\u2014bukan untuk nge-pull, tapi untuk merenung.</p> <p>Di sinilah kita menyalakan kopi, membuka log commit, dan bertanya: \u201cBagaimana sebenarnya Git mengubah cara aku berpikir, bekerja, dan\u2026 menamai file?\u201d</p> <p>Bagian ini penuh cerita, contoh nyata, dan renungan akademik yang tak kaku. Karena Git bukan hanya alat, tapi juga cara baru mengelola pengetahuan, membaca jejak intelektual, dan (kalau kamu niat) \u2014 menulis sejarah hidup risetmu.</p> <p>Jadi, mari kita baca. Tanpa konflik, tanpa perlu merge.</p>"},{"location":"20-babr17/","title":"Bab 17","text":"<p>\u2753 Bab 17  Tanya Jawab Seputar Git: Kesalahan Umum dan Solusinya</p> <p>\ud83e\udde0 Karena Setiap Pemula Pasti Pernah Bingung</p> <p>Git adalah alat yang sangat kuat\u2014dan seperti alat yang kuat lainnya, ia juga bisa terasa rumit, menakutkan, dan bahkan membingungkan, terutama di awal. Bahkan pengguna Git yang sudah cukup berpengalaman pun masih bisa bingung saat menemui konflik, kehilangan commit, atau merasa \u201csalah tekan tombol\u201d.</p> <p>Bab ini hadir sebagai panduan ringan namun praktis untuk menjawab pertanyaan dan masalah umum yang sering dihadapi oleh pengguna baru Git, terutama yang menggunakan GitHub Desktop.</p> <p>Harapannya, kamu akan merasa lebih tenang, lebih siap, dan lebih percaya diri saat menghadapi \u201cerror kecil yang bikin panik besar\u201d.</p> <p>\ud83d\ude4b\u200d\u2642\ufe0f Pertanyaan 1: \"Saya salah edit file dan sudah commit. Gimana cara balik ke versi sebelumnya?\"</p> <p>Tenang. Git menyimpan semua commit sebelumnya. Kamu bisa:</p> <ol> <li>Buka GitHub Desktop</li> <li>Klik tab History</li> <li>Temukan commit sebelum kesalahan</li> <li>Klik kanan commit tersebut \u2192 Revert this commit</li> </ol> <p>\ud83d\udca1 Ini akan membuat commit baru yang membatalkan perubahan. Jadi kamu tetap punya histori lengkap.</p> <p>\ud83d\ude4b\u200d\u2640\ufe0f Pertanyaan 2: \"Kenapa file saya nggak muncul di GitHub setelah saya edit?\"</p> <p>Kemungkinan besar kamu: - Belum commit perubahan - Atau sudah commit, tapi belum push ke GitHub</p> <p>Solusi: - Buka GitHub Desktop - Lihat apakah ada file yang berubah (terdeteksi) - Klik Commit to main - Lalu klik Push origin</p> <p>Setelah itu, buka GitHub lewat browser \u2192 file akan muncul di sana.</p> <p>\ud83d\ude4b Pertanyaan 3: \"Apa bedanya Commit dan Push?\"</p> <p>Analoginya begini: - Commit: menyimpan perubahan ke \"draft lokal\" di laptop - Push: mengirim semua commit ke \"cloud\" di GitHub</p> <p>Jadi commit tanpa push = hanya kamu yang tahu Push tanpa commit = tidak bisa dilakukan</p> <p>Gunakan commit sesering mungkin, push setiap selesai satu bagian kerja besar.</p> <p>\u2753 Pertanyaan 4: \"Saya mau kembali ke kondisi proyek kemarin. Bisa nggak?\"</p> <p>Bisa banget. Caranya:</p> <ul> <li>Buka GitHub Desktop</li> <li>Klik tab History</li> <li>Klik kanan commit yang kamu inginkan \u2192 pilih Checkout this commit</li> </ul> <p>Tapi ingat: - Ini akan membuat kondisi repo seperti saat itu - Kamu tidak bisa melakukan commit baru sampai kembali ke branch utama</p> <p>Solusi lebih aman: buat branch dari commit tersebut, lalu eksplorasi di sana.</p> <p>\ud83d\uded1 Pertanyaan 5: \"Saya mengalami konflik saat merge. Harus bagaimana?\"</p> <p>Konflik terjadi saat dua versi file berubah di bagian yang sama. Git bingung mana yang harus dipilih.</p> <p>Solusi di GitHub Desktop: 1. Akan muncul tanda merah: Conflict 2. Klik kanan file \u2192 Open in Editor 3. Lihat bagian ini:</p> <pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; main\nVersi A\n=======\nVersi B\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; fitur-xyz\n</code></pre> <ol> <li>Pilih salah satu atau gabungkan</li> <li>Hapus tanda <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code>, dan <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code></li> <li>Simpan \u2192 kembali ke GitHub Desktop \u2192 Mark as resolved \u2192 Commit merge</li> </ol> <p>\ud83d\udca1 Pertanyaan 6: \"Apa yang harus dicommit, dan apa yang sebaiknya diabaikan?\"</p> <p>Simpan (commit): - Kode <code>.py</code>, <code>.ipynb</code>, <code>.r</code>, <code>.md</code> - File konfigurasi penting: <code>.gitignore</code>, <code>README.md</code></p> <p>Abaikan: - File dataset besar (<code>.zip</code>, <code>.csv</code> mentah) - File hasil (<code>.pdf</code>, <code>.html</code>, <code>.log</code>) - File sistem (<code>.DS_Store</code>, <code>Thumbs.db</code>)</p> <p>Gunakan <code>.gitignore</code> untuk mengatur ini.</p> <p>\ud83d\udcc2 Pertanyaan 7: \"Boleh nggak saya hapus folder langsung dari Finder?\"</p> <p>Boleh, tapi sebaiknya: - Setelah hapus, buka GitHub Desktop - Commit perubahan itu</p> <p>Kalau kamu menghapus file atau folder langsung dari komputer, Git tetap akan melacak bahwa file itu hilang, dan kamu bisa commit penghapusan itu sebagai bagian dari histori proyek.</p> <p>\ud83e\uddef Pertanyaan 8: \"Apakah mungkin kehilangan semua commit?\"</p> <p>Sangat jarang. Git sangat aman. Bahkan kalau kamu salah, biasanya histori masih bisa dikembalikan.</p> <p>Kamu mungkin hanya: - Berpindah ke branch yang berbeda - Belum push commit ke GitHub</p> <p>Tips: - Sering push ke GitHub - Jangan hapus repo lokal kecuali yakin - Buat backup versi <code>.zip</code> jika ragu</p> <p>\u2705 Checklist Bab Ini</p> <ul> <li>[ ] Saya tahu cara mengembalikan commit yang keliru</li> <li>[ ] Saya paham perbedaan commit dan push</li> <li>[ ] Saya mengerti cara menyelesaikan konflik merge</li> <li>[ ] Saya tahu kapan dan bagaimana menggunakan <code>.gitignore</code></li> <li>[ ] Saya siap menghadapi error Git tanpa panik</li> </ul> <p>\ud83d\ude80 Bab Selanjutnya: Studi Kasus Mahasiswa Di Bab 18, kamu akan melihat bagaimana mahasiswa dari berbagai disiplin (sains, sosial, humaniora) menggunakan Git untuk: - Menyusun skripsi - Menganalisis data - Dan menulis dokumentasi kolaboratif</p> <p>Karena Git bukan hanya alat untuk programmer\u2014tapi alat berpikir modern.</p>"},{"location":"21-babr18/","title":"Bab 18","text":"<p>\ud83c\udf93 Bab 18  Studi Kasus Mahasiswa: Mengelola Skripsi dan Tugas Akhir dengan Git</p> <p>\ud83d\udcd8 Kenapa Mahasiswa Perlu Git?</p> <p>Git sering dianggap alat khusus programmer. Tapi kenyataannya, Git sangat relevan untuk semua mahasiswa\u2014terutama saat menyusun karya tulis seperti: - Skripsi - Tesis - Proyek akhir - Laporan penelitian</p> <p>Git membantu mengelola file, melacak perubahan, dan menyimpan versi kerja secara sistematis. Tidak ada lagi file dengan nama <code>skripsi_final_fix_benar_revisi_dosen2_baru_lagi.docx</code>.</p> <p>Pada bab ini, kita akan menjelajahi cerita nyata dan studi kasus mahasiswa dari berbagai disiplin yang memanfaatkan Git dan GitHub untuk proyek akademiknya.</p> <p>\ud83c\udf93 Kasus 1: Diah (Sosiologi) \u2013 Dokumentasi Skripsi dan Wawancara</p> <p>Diah sedang menulis skripsi berjudul \u201cRepresentasi Media terhadap Pekerja Migran\u201d. Ia menggunakan Word untuk menulis, tetapi menggunakan Markdown dan GitHub untuk: - Menyimpan catatan wawancara - Menulis outline dan log revisi - Menyusun daftar pustaka secara terpisah</p> <p>\ud83d\udd0d Tantangan: - Sering revisi dengan dua pembimbing berbeda - Satu laptop, takut hilang</p> <p>\ud83d\udca1 Solusi: - Buat folder <code>data/wawancara/</code> untuk transkrip - Simpan catatan revisi per tanggal di <code>docs/log.md</code> - Gunakan GitHub Desktop untuk commit tiap perubahan</p> <p>Hasilnya? Semua revisi terdokumentasi, dan saat laptopnya rusak, file tetap aman di GitHub.</p> <p>\ud83c\udf93 Kasus 2: Rafi (Teknik Informatika) \u2013 Skripsi dengan Jupyter Notebook</p> <p>Rafi menganalisis citra satelit dengan Python. Semua analisis ia tulis dalam Jupyter Notebook. Awalnya, Rafi sering mengalami: - Kehilangan versi kode - File rusak setelah eksperimen gagal</p> <p>\ud83d\udd27 Langkah yang Ia Lakukan: - Buat repositori GitHub bernama <code>skripsi-rafi</code> - Pisahkan folder: <code>notebooks/</code>, <code>data/</code>, <code>figures/</code> - Gunakan <code>.gitignore</code> untuk mengecualikan data besar - Push ke GitHub setiap hari</p> <p>Rafi juga menulis dokumentasi metode di GitBook, yang ia berikan ke dosen pembimbing.  </p> <p>Dosen: \u201cSaya lebih mudah meninjau lewat GitBook daripada Word.\u201d</p> <p>\ud83c\udf93 Kasus 3: Hana (Kesehatan Masyarakat) \u2013 Penelitian Lapangan</p> <p>Hana meneliti pengaruh intervensi gizi terhadap remaja di desa X. Ia menggunakan Excel, SPSS, dan Google Docs.</p> <p>Karena Git tidak bisa langsung melacak file <code>.sav</code> atau Google Docs, Hana: - Menyimpan metadata analisis di file <code>.md</code> - Menulis log harian riset lapangan: <code>docs/log-penelitian.md</code> - Membuat template kuesioner di repo <code>instrument-gizi</code></p> <p>Git membantu Hana menjaga catatan lapangan tetap tertata, dan ia bisa menunjukkan versi kuesioner ke pembimbing dengan link GitHub.</p> <p>\ud83c\udf93 Pelajaran dari Ketiga Kasus</p> Masalah Umum Mahasiswa Solusi via Git &amp; GitHub Bingung revisi dari banyak pembimbing Gunakan commit log untuk lacak perubahan per sesi Takut kehilangan file Simpan di GitHub, bisa diakses dari mana saja Data dan dokumentasi bercampur Pisahkan dengan struktur folder dan <code>.gitignore</code> Sulit melacak perkembangan skripsi Gunakan log revisi di file Markdown Kesulitan kolaborasi Manfaatkan branch, pull request, dan GitBook <p>\ud83d\udcac Apa Kata Mereka?</p> <p>\u201cGit bikin saya merasa proyek saya benar-benar \u2018tumbuh\u2019, bukan cuma satu file yang ditimpa terus.\u201d \u2014 Diah</p> <p>\u201cSaya gak tahu harus pakai Git untuk skripsi, tapi sekarang saya malah ngerasa aneh kalau gak pakai.\u201d \u2014 Rafi</p> <p>\u201cYang awalnya takut, sekarang saya malah ngajarin teman kelompok saya pakai GitHub!\u201d \u2014 Hana</p> <p>\ud83e\udde0 Git untuk Semua Disiplin</p> <p>Git bukan hanya soal kode. Git adalah: - Cara berpikir sistematis - Cara kerja kolaboratif - Cara menjaga transparansi</p> <p>Baik kamu menulis puisi, menganalisis data statistik, atau membuat aplikasi, Git bisa membantu kamu bekerja lebih rapi, lebih aman, dan lebih profesional.</p> <p>\u2705 Checklist Bab Ini</p> <ul> <li>[ ] Saya memahami manfaat Git untuk skripsi atau proyek akhir</li> <li>[ ] Saya tahu cara menyusun folder riset secara terstruktur</li> <li>[ ] Saya siap mencatat progres kerja dengan Git</li> <li>[ ] Saya percaya bahwa Git bisa digunakan oleh siapa pun, bukan hanya programmer</li> </ul> <p>\ud83d\ude80 Bab Selanjutnya: Menulis Proyek Non-Koding dengan Git</p> <p>Di Bab 19, kita akan bahas cara menggunakan Git untuk proyek-proyek non-programming, seperti penulisan artikel ilmiah, modul pelatihan, atau bahkan buku puisi digital.</p> <p>Karena tidak semua proyek butuh baris kode\u2014tapi semua proyek butuh keteraturan.</p>"},{"location":"22-babr19/","title":"Bab 19","text":"<p>\u270d\ufe0f Bab 19  Menulis Proyek Non-Koding dengan Git</p> <p>\ud83e\udde0 Git Bukan Hanya untuk Koding</p> <p>Ketika mendengar kata Git, banyak orang langsung membayangkan baris-baris kode, terminal hitam, dan proyek software rumit. Padahal kenyataannya, Git adalah alat untuk siapa pun yang bekerja dengan dokumen teks\u2014dan itu mencakup hampir semua orang di dunia akademik, pendidikan, dan kreatif.</p> <p>Mulai dari menulis artikel ilmiah, laporan pelatihan, materi kelas, hingga puisi dan buku non-fiksi, Git dapat digunakan untuk: - Menyimpan jejak versi tulisan - Mengelola dokumen besar secara modular - Menjaga konsistensi revisi - Mencatat proses berpikir dan perubahan narasi</p> <p>Pada bab ini, kita akan mengeksplorasi bagaimana Git bisa diandalkan dalam proyek non-koding, dan justru memberikan kekuatan creative versioning yang sering tak dimiliki aplikasi pengolah kata biasa.</p> <p>\ud83d\udcda Contoh Proyek Non-Koding</p> Jenis Proyek Format File Tools Pendukung Artikel ilmiah / esai <code>.md</code>, <code>.tex</code>, <code>.docx</code> GitHub + Pandoc Modul pelatihan <code>.md</code>, <code>.pdf</code> GitBook, Reveal.js Buku pelajaran / fiksi <code>.md</code>, <code>.epub</code> GitBook, Leanpub Laporan organisasi / CSR <code>.md</code>, <code>.html</code> Hugo, MkDocs Catatan riset / log lapangan <code>.md</code>, <code>.csv</code> GitHub Desktop <p>\u270f\ufe0f Mengapa Git Bermanfaat untuk Penulis?</p> <ol> <li>Histori yang Transparan Git mencatat semua perubahan secara otomatis. Kamu bisa:</li> <li>Melihat versi minggu lalu</li> <li>Menelusuri siapa menulis apa (jika bekerja tim)</li> <li> <p>Kembali ke versi awal tanpa takut kehilangan</p> </li> <li> <p>Modularitas Bab Dokumen bisa dipisah jadi beberapa file: <code>bab1.md</code>, <code>bab2.md</code>, <code>lampiran.md</code>. Ini membuat penulisan besar terasa lebih ringan dan terorganisir.</p> </li> <li> <p>Kolaborasi Efisien Git memungkinkan penulis dan editor bekerja pada file yang sama tanpa saling menimpa. Komentar, revisi, dan penggabungan bisa dilakukan melalui Pull Request.</p> </li> <li> <p>Sinkronisasi Lintas Perangkat Bekerja di laptop kampus, revisi di rumah, cek di HP. Semua bisa dilakukan lewat GitHub dan GitBook yang saling terhubung.</p> </li> </ol> <p>\ud83e\udded Contoh Alur Penulisan Buku dengan Git</p> <ol> <li>Buat folder <code>buku-ku/</code></li> <li>Tambahkan file:</li> <li><code>README.md</code> \u2192 Ringkasan proyek</li> <li><code>bab1-pendahuluan.md</code></li> <li><code>bab2-isi.md</code></li> <li><code>bab3-penutup.md</code></li> <li>Gunakan GitHub Desktop untuk commit tiap bab yang selesai</li> <li>Tulis dokumentasi pendukung di <code>docs/</code></li> <li>Hubungkan ke GitBook \u2192 tampil sebagai buku digital</li> </ol> <p>\ud83c\udf89 Kamu kini memiliki buku yang: - Bisa dibaca online - Bisa dicetak PDF - Bisa dikembangkan siapa pun secara kolaboratif</p> <p>\ud83e\udde0 Studi Kasus: Modul Pelatihan Berbasis Git</p> <p>Bayu adalah seorang dosen yang menyusun modul pelatihan digital literasi. Alih-alih menyusun semuanya di Word, Bayu: - Menulis tiap sesi pelatihan di <code>.md</code> \u2192 <code>sesi1.md</code>, <code>sesi2.md</code>, dll. - Menyimpan semua versi perubahan dengan commit - Mengundang rekan dosen untuk mereview via GitHub Pull Request - Mengubahnya menjadi buku pelatihan online via GitBook</p> <p>Hasilnya? Materi yang dulunya berantakan sekarang tampil profesional, bisa dibaca siapa pun, dan terus diperbarui.</p> <p>\ud83d\udcd6 Menulis Itu Coding Juga\u2014Dalam Narasi</p> <p>Menulis bukan hanya merangkai kata, tapi membangun struktur berpikir. Sama seperti coding: - Ada logika - Ada perubahan versi - Ada kesalahan dan revisi</p> <p>Git menghadirkan superpower yang dulu hanya dimiliki oleh software developer, kini bisa dimanfaatkan oleh siapa saja yang suka menulis.</p> <p>\ud83d\udca1 Tips Menulis Proyek Non-Koding dengan Git</p> <ul> <li>Gunakan Markdown: ringan, mudah dipahami, bisa dikonversi ke PDF, HTML, dll.</li> <li>Pisahkan file per bab agar mudah dikelola</li> <li>Gunakan commit message seperti jurnal kerja: <code>Tambah ringkasan bab 2</code>, <code>Revisi paragraf pembuka</code></li> <li>Manfaatkan <code>.gitignore</code> untuk mengecualikan file <code>.docx</code>, <code>.pdf</code>, atau cache</li> <li>Sinkronkan dengan GitBook untuk versi publik</li> </ul> <p>\u2705 Checklist Bab Ini</p> <ul> <li>[ ] Saya tahu bahwa Git bisa digunakan untuk proyek non-koding</li> <li>[ ] Saya bisa menulis bab atau artikel dalam format Markdown</li> <li>[ ] Saya bisa menyimpan jejak perubahan tulisan lewat Git</li> <li>[ ] Saya siap mencoba menulis buku digital menggunakan GitBook</li> </ul> <p>\ud83d\ude80 Bab Selanjutnya: Peran Git dalam Reproducible Research</p> <p>Di Bab 20, kita akan membahas konsep besar yang menjadi landasan gerakan ilmiah modern: riset yang dapat diulang, ditelusuri, dan dipercaya\u2014dan bagaimana Git memainkan peran sentral di dalamnya.</p>"},{"location":"23-babr20/","title":"Bab 20","text":"<p>\ud83d\udd2c Bab 20  Peran Git dalam Reproducible Research</p> <p>\ud83d\udccc Mengapa Reproducibility Itu Penting?</p> <p>Dalam dunia sains, keindahan suatu temuan tidak hanya terletak pada hasil akhirnya\u2014tapi juga pada kemampuannya untuk diuji ulang, ditelusuri, dan diverifikasi oleh peneliti lain. Inilah yang disebut sebagai reproducible research atau riset yang dapat direproduksi.</p> <p>Namun, banyak riset yang gagal memenuhi standar ini karena: - Data tidak tersedia - Analisis tidak terdokumentasi - Perubahan file tidak tercatat - Metode berubah tanpa jejak</p> <p>Git hadir sebagai alat dokumentasi ilmiah yang hidup, memungkinkan kamu melacak setiap langkah, setiap analisis, dan setiap revisi\u2014secara otomatis, transparan, dan terbuka.</p> <p>\ud83e\udde0 Apa Itu Reproducible Research?</p> <p>Reproducibility adalah kemampuan pihak lain untuk mengulang proses riset menggunakan: - Data yang sama - Metode yang sama - Alur analisis yang jelas</p> <p>Jika kamu mengklaim sebuah temuan, reproducibility mengharuskan bahwa siapa pun bisa membuktikannya tanpa menebak-nebak.</p> <p>Tanpa reproducibility, riset hanya menjadi opini.</p> <p>\ud83e\udded Bagaimana Git Mendukung Reproducibility?</p> <p>Mari kita uraikan peran Git dalam setiap elemen riset:</p> <ol> <li>\ud83d\udce6 Struktur Proyek yang Konsisten Git mendorong kamu menyusun proyek dengan folder seperti:</li> </ol> <pre><code>data/        \u2192 berisi dataset\ncode/        \u2192 skrip analisis\ndocs/        \u2192 dokumentasi\nREADME.md    \u2192 penjelasan proyek\n</code></pre> <p>Struktur ini menjadi dasar keterbukaan dan kerapian riset.</p> <ol> <li>\ud83d\udd52 Riwayat Perubahan Otomatis Dengan Git, kamu tidak pernah kehilangan versi:</li> <li>Perubahan model</li> <li>Perubahan parameter</li> <li> <p>Perbaikan kesalahan Semua tercatat dalam commit.</p> </li> <li> <p>\ud83d\udcdc Log Analisis yang Terbuka Git memungkinkan kamu mencatat log eksperimen layaknya buku catatan digital: <code>commit 213a7e \u2192 Uji regresi logistik dengan subset data perempuan</code></p> </li> <li> <p>\ud83c\udf10 Kolaborasi dan Review Terbuka Pull Request memfasilitasi diskusi terbuka antar peneliti:</p> </li> <li>Reviewer bisa meninjau skrip</li> <li>Kolaborator bisa memberi saran</li> <li> <p>Semua terarsipkan</p> </li> <li> <p>\ud83d\udce4 Distribusi Data dan Kode Dengan menghubungkan ke Zenodo, kamu bisa:</p> </li> <li>Menyimpan versi final proyek</li> <li>Mendapatkan DOI untuk sitasi</li> <li>Menjamin akses jangka panjang</li> </ol> <p>\ud83d\udca1 Studi Kasus: Penelitian Sosial Reproducible</p> <p>Seorang mahasiswa pascasarjana meneliti pengaruh literasi digital terhadap perilaku konsumsi media. Ia menggunakan: - Survei online (Excel) - Analisis regresi (R) - Visualisasi data (ggplot2)</p> <p>Dengan Git, ia: - Menyimpan semua skrip R dan hasilnya - Menulis dokumentasi metode di GitBook - Menyimpan data teranonimkan di repo - Membuat rilis di GitHub \u2192 Zenodo \u2192 Mendapatkan DOI</p> <p>Hasilnya: dosen penguji, kolega, dan pembaca jurnal bisa melihat, menjalankan ulang, dan memverifikasi semua prosesnya. Itulah kekuatan reproducible research.</p> <p>\ud83e\udded Mengubah Mindset Riset</p> <p>Git mendorong kamu berpikir seperti ini:</p> Sebelum Sesudah Menggunakan Git \u201cFile skripsi final terbaru?\u201d \u201cCommit <code>v1.3</code> sudah di-review dan rilis\u201d \u201cMana dataset yang dipakai?\u201d \u201cAda di folder <code>data/cleaned.csv</code>\u201d \u201cDosen minta revisi lagi\u2026\u201d \u201cSaya revert ke commit minggu lalu\u201d \u201cTerlalu banyak versi file\u201d \u201cSemua perubahan tercatat otomatis\u201d <p>\ud83d\udee0\ufe0f Tools Pendukung</p> <p>Git akan makin kuat bila didampingi dengan alat lain:</p> Kebutuhan Tools Menulis skrip RStudio, VS Code, Jupyter Notebook Dokumentasi metode GitBook, MkDocs Visualisasi hasil Matplotlib, ggplot2 Cek plagiarisme kode GitHub Copilot (asisten, bukan jawaban) Repositori sitasi dan metadata Zenodo, Figshare, OSF <p>\u2705 Checklist Bab Ini</p> <ul> <li>[ ] Saya tahu pentingnya reproducibility dalam riset</li> <li>[ ] Saya memahami peran Git dalam dokumentasi riset</li> <li>[ ] Saya tahu bagaimana mencatat alur analisis dan eksperimen dengan Git</li> <li>[ ] Saya siap membangun proyek riset yang terbuka dan dapat diuji ulang</li> </ul> <p>\ud83d\ude80 Bab Selanjutnya: Integrasi Git dengan Alat Akademik Lain</p> <p>Di Bab 21, kamu akan melihat bagaimana Git bisa dipadukan dengan alat-alat populer di dunia akademik: Zotero untuk sitasi, Overleaf untuk LaTeX, Google Docs untuk kolaborasi hybrid\u2014dan menjadikan proyekmu makin luwes dan adaptif.</p>"},{"location":"24-babr21/","title":"Bab 21","text":"<p>\ud83d\udd17 Bab 21  Integrasi Git dengan Alat-Akat Akademik Lain</p> <p>\ud83e\udde0 Git Tidak Sendiri di Dunia Ilmiah</p> <p>Selama 20 bab sebelumnya, kita telah mengenal Git sebagai alat pengelola versi, catatan kerja digital, dan penyusun dokumentasi proyek riset. Namun dalam dunia nyata, pekerjaan akademik tidak hanya melibatkan Git. Kita juga bergantung pada:</p> <ul> <li>Alat sitasi seperti Zotero</li> <li>Editor LaTeX seperti Overleaf</li> <li>Editor daring kolaboratif seperti Google Docs</li> <li>Perangkat spreadsheet dan cloud seperti Google Sheets dan Excel</li> </ul> <p>Kabar baiknya? Git tidak berdiri sendiri. Ia dapat berteman baik dan berintegrasi dengan semua alat ini, menjadikannya semakin fleksibel dan kuat dalam menunjang kerja riset, penulisan, dan kolaborasi.</p> <p>\ud83d\udcda Git + Zotero = Sitasi yang Tersinkronisasi</p> <p>Zotero adalah aplikasi manajemen referensi yang membantu kamu: - Menyimpan dan mengelola pustaka - Menyisipkan sitasi otomatis ke dokumen - Menyusun daftar pustaka sesuai gaya APA, MLA, dll.</p> <p>\ud83d\udccc Integrasi Praktis</p> <ol> <li>Gunakan Zotero + BetterBibTeX untuk menghasilkan file <code>.bib</code></li> <li>Simpan file <code>.bib</code> ke folder <code>refs/</code> dalam proyek Git</li> <li>Gunakan file itu di dokumen <code>.tex</code>, Markdown, atau RMarkdown</li> <li>Lacak perubahan pustaka dengan Git</li> </ol> <p>\ud83c\udfaf Git akan mencatat kapan referensi ditambahkan, diubah, atau diperbarui.</p> <p>\ud83d\udcc4 Git + Overleaf = LaTeX yang Aman</p> <p>Overleaf adalah editor LaTeX berbasis web yang sangat populer di kalangan peneliti. Ia memiliki fitur version control, tapi masih dasar.</p> <p>Git memungkinkan kamu untuk: - Menyimpan salinan lokal proyek Overleaf - Melakukan editing offline - Menyinkronkan ulang ke Overleaf dengan GitHub</p> <p>\ud83d\udd27 Cara Menghubungkan: 1. Hubungkan akun Overleaf ke GitHub 2. Di Overleaf, buka proyek \u2192 Menu \u2192 GitHub Sync 3. Set repo GitHub sebagai asal/sinkronisasi</p> <p>Sekarang kamu bisa menulis paper ilmiah di Overleaf dan tetap menyimpan semua versinya di GitHub!</p> <p>\ud83d\udc65 Git + Google Docs/Sheets = Kolaborasi Hybrid</p> <p>Google Docs dan Google Sheets memang tidak berbasis Git, tapi kamu tetap bisa mengintegrasikan bagian-bagian tertentu dari proses kerja kamu:</p> <p>\u2705 Praktik Terbaik: - Ekspor data dari Google Sheets ke <code>.csv</code> \u2192 simpan ke <code>data/</code> - Tulis ringkasan diskusi dari Google Docs ke <code>log-revisi.md</code> - Gunakan Git untuk menyimpan hasil akhir atau versi yang ingin diarsipkan</p> <p>\ud83c\udfaf Git cocok untuk menyimpan hasil tetap dan jejak perubahan utama, bukan untuk menyimpan proses diskusi informal.</p> <p>\ud83d\uddbc\ufe0f Git + Canva atau Figma</p> <p>Jika kamu mendesain visual seperti infografik, diagram, atau layout buku: - Ekspor hasilnya sebagai <code>.png</code> atau <code>.svg</code> - Simpan ke folder <code>assets/</code> atau <code>figures/</code> dalam repositori - Gunakan commit message yang menjelaskan perubahan visual</p> <p>Git tidak bisa melacak isi gambar, tapi bisa mencatat kapan gambar berubah\u2014dan kamu bisa menelusuri versi sebelumnya.</p> <p>\ud83d\udccc Ringkasan Integrasi</p> Alat Apa yang Diintegrasikan Cara Git Membantu Zotero + BetterBibTeX File <code>.bib</code> dan referensi Melacak perubahan pustaka secara otomatis Overleaf Dokumen <code>.tex</code>, grafik, dan rujukan Sinkronisasi dan backup versi paper Google Docs/Sheets Data <code>.csv</code>, log <code>.md</code> Menyimpan ringkasan &amp; hasil final Canva, Figma Gambar ekspor (<code>.png</code>, <code>.svg</code>) Riwayat perubahan visualisasi Obsidian / Notion Teks Markdown dan catatan riset pribadi Backup dan histori catatan <p>\ud83e\udde0 Kenapa Ini Penting?</p> <p>Dalam dunia riset modern, kamu jarang bekerja dengan satu alat saja. Git bukan solusi tunggal\u2014ia adalah penghubung lintas alat. Dengan pendekatan ini:</p> <ul> <li>Kamu tetap bisa pakai alat favoritmu</li> <li>Tapi kamu juga mendapatkan histori dan backup yang terstruktur</li> <li>Dan kamu bisa membagikan hasil kerja dalam format standar terbuka</li> </ul> <p>\u2705 Checklist Bab Ini</p> <ul> <li>[ ] Saya memahami peran Git sebagai pengelola versi lintas alat</li> <li>[ ] Saya tahu cara menyimpan file <code>.bib</code> dari Zotero ke Git</li> <li>[ ] Saya bisa menyinkronkan proyek Overleaf ke GitHub</li> <li>[ ] Saya tahu batas dan manfaat integrasi Google Docs ke Git</li> <li>[ ] Saya yakin bisa mengatur proyek akademik saya dengan lebih terpadu</li> </ul> <p>\ud83d\ude80 Bab Selanjutnya: Kolaborasi Menulis Buku Digital bersama Tim</p> <p>Di Bab 22, kita akan menyelami praktik nyata menulis buku digital secara kolaboratif, menggunakan Git dan GitBook\u2014dari pembagian bab, review, sampai publikasi.</p> <p>Karena buku tidak selalu ditulis sendiri\u2014dan Git menjadikan menulis bersama lebih mudah, rapi, dan menyenangkan.</p>"},{"location":"25-babr22/","title":"Bab 22","text":"<p>\ud83d\udcda Bab 22  Kolaborasi Menulis Buku Digital dengan Git dan GitBook</p> <p>\ud83e\udde0 Menulis Buku: Tidak Harus Sendiri</p> <p>Di era digital, menulis buku bukan lagi pekerjaan soliter. Kini, kita bisa menulis buku secara kolaboratif seperti membangun proyek perangkat lunak: - Dengan tim - Dengan pembagian tugas - Dengan versi yang bisa ditelusuri - Dan dengan dokumentasi yang rapi</p> <p>Git dan GitBook memberikan sarana untuk menjadikan proses ini terbuka, terstruktur, dan menyenangkan.</p> <p>Bab ini akan menunjukkan bagaimana kamu dan tim bisa menulis buku bersama\u2014baik itu modul pelatihan, buku ajar, antologi esai, atau bahkan laporan riset\u2014menggunakan workflow kolaboratif yang didukung Git dan GitBook.</p> <p>\ud83d\udcd8 Kenapa Git Cocok untuk Menulis Buku?</p> <p>Menulis buku, jika dipikir-pikir, sangat mirip dengan pengembangan kode: - Ada banyak file (bab) - Perlu struktur folder yang jelas - Perlu versi revisi dan riwayat perubahan - Sering melibatkan banyak kontributor</p> <p>Dengan Git: - Setiap perubahan ditelusuri - Setiap kontributor tercatat - Tiap bab bisa dikerjakan di branch sendiri - Penyatuan hasil (merge) dilakukan dengan Pull Request</p> <p>GitBook menambahkan: - Antarmuka baca yang nyaman - Navigasi bab otomatis - Link publik untuk distribusi</p> <p>\ud83d\udee0\ufe0f Struktur Dasar Proyek Buku</p> <p>Berikut contoh struktur folder untuk buku digital kolaboratif:</p> <pre><code>buku-digital/\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 pendahuluan.md\n\u2502   \u251c\u2500\u2500 bab1-digitalisasi.md\n\u2502   \u251c\u2500\u2500 bab2-data.md\n\u2502   \u251c\u2500\u2500 bab3-analitik.md\n\u2502   \u2514\u2500\u2500 penutup.md\n\u251c\u2500\u2500 assets/\n\u2502   \u2514\u2500\u2500 gambar-cover.png\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 .gitignore\n</code></pre> <p>Setiap file <code>.md</code> di <code>docs/</code> akan menjadi satu bab di GitBook.</p> <p>\ud83d\udc65 Kolaborasi: Pembagian Peran</p> <p>Contoh Tim Penulis:</p> Peran Tugas Utama Penulis A Bab 1 dan revisi umum Penulis B Bab 2 dan referensi Penulis C Bab 3 dan infografik Editor Cek ejaan, gaya bahasa, konsistensi Admin Git Review PR, struktur folder, sinkronisasi <p>\ud83d\udd04 Workflow Kolaborasi Menulis</p> <ol> <li> <p>Fork atau clone repositori buku    Setiap penulis bekerja di salinan yang sama</p> </li> <li> <p>Buat branch untuk bab masing-masing    Contoh: <code>fitur/bab1-rafi</code>, <code>fitur/bab2-hana</code></p> </li> <li> <p>Tulis isi bab di file Markdown    Gunakan gaya yang konsisten</p> </li> <li> <p>Commit perubahan secara berkala    Gunakan pesan commit seperti: <code>tambah paragraf 2 tentang literasi digital</code></p> </li> <li> <p>Push dan ajukan Pull Request    PR digunakan untuk review isi bab</p> </li> <li> <p>Editor memeriksa dan merge ke <code>main</code>    Setelah disetujui, bab akan tergabung ke buku utama</p> </li> <li> <p>GitBook otomatis memperbarui tampilan buku</p> </li> </ol> <p>\u2728 Tips Menulis Buku Kolaboratif</p> <ul> <li>Gunakan template Markdown bersama (judul, subjudul, kutipan)</li> <li>Setujui gaya bahasa dan istilah sejak awal</li> <li>Gunakan komentar di Pull Request untuk diskusi isi</li> <li>Jangan takut mengulang commit\u2014Git menyimpan semua versi</li> <li>Revisi satu bab? Buat branch baru dan ajukan PR baru</li> </ul> <p>\ud83d\udcd6 Contoh Nyata: Modul Pelatihan Kolaboratif</p> <p>Sebuah komunitas data membuka proyek open-source: \u201cBuku Panduan Literasi Data untuk Guru\u201d</p> <p>Tim terdiri dari: - Penulis kurikulum - Guru SD dan SMP - Desainer visual - Editor bahasa</p> <p>Mereka: - Membuat repositori GitHub publik - Menulis per bab di folder <code>docs/</code> - Menggunakan GitBook untuk preview - Mengadakan sesi review mingguan via PR</p> <p>Hasilnya? Modul dapat dibaca publik, dikembangkan ulang, bahkan diterjemahkan oleh tim lain.</p> <p>\ud83c\udf81 Keuntungan Kolaborasi Buku via Git</p> Aspek Tanpa Git Dengan Git Versi revisi Sulit dilacak Otomatis dicatat Kolaborasi antar bab Campur aduk Jelas per branch dan file Riwayat perubahan Manual (nama file) Tersimpan sebagai commit Distribusi Manual kirim PDF Tautan GitBook publik Keterlibatan tim Pasif Aktif via PR dan komentar <p>\u2705 Checklist Bab Ini</p> <ul> <li>[ ] Saya memahami cara menyusun buku berbasis Git</li> <li>[ ] Saya tahu peran Git dalam mengatur penulisan kolaboratif</li> <li>[ ] Saya siap berkontribusi dalam format Markdown</li> <li>[ ] Saya tahu bagaimana menampilkan hasilnya di GitBook</li> </ul> <p>\ud83d\ude80 Bab Selanjutnya: Analisis Aktivitas Repositori dan Jejak Kolaborasi</p> <p>Di Bab 23, kita akan melihat bagaimana GitHub bisa menjadi alat refleksi, bukan hanya tempat kerja. Kita akan belajar menganalisis kontribusi, aktivitas penulis, dan menyusun laporan kolaborasi dari log Git secara visual.</p>"},{"location":"26-babr23/","title":"Bab 23","text":"<p>\ud83d\udcca Bab 23  Analisis Aktivitas Repositori dan Jejak Kolaborasi</p> <p>\ud83e\udde0 Git Sebagai Catatan Jejak Kolaboratif</p> <p>Salah satu kekuatan tersembunyi dari Git adalah kemampuannya merekam setiap langkah kerja secara otomatis. Tak hanya menyimpan file, Git juga mencatat: - Siapa mengubah apa - Kapan perubahan dilakukan - Apa isi perubahan - Dan bagaimana alurnya saling terhubung</p> <p>Data ini bukan sekadar jejak teknis. Bila dianalisis dengan cermat, ia bisa memberikan wawasan reflektif tentang: - Bagaimana sebuah tim bekerja - Siapa berkontribusi di bagian mana - Pola kerja yang muncul dari waktu ke waktu</p> <p>Di bab ini, kita akan memanfaatkan fitur analitik GitHub dan log Git untuk mengevaluasi proses kolaborasi dan kerja tim secara transparan, ilmiah, dan bermanfaat.</p> <p>\ud83d\udcc8 Mengapa Perlu Menganalisis Repositori?</p> <p>Beberapa alasan kuat: - Evaluasi kontribusi secara adil dalam proyek bersama - Refleksi proses belajar pada proyek riset atau kelas - Menunjukkan hasil kerja dalam seminar atau laporan akhir - Membuktikan keterlibatan dalam proyek publik atau open-source</p> <p>Alih-alih berkata, \u201cSaya ikut bantu kok,\u201d kamu bisa menunjukkan: \u201cSaya menyumbang 30 commit dan menulis dua bab penuh.\u201d</p> <p>\ud83e\udded Fitur Analisis GitHub: Insight</p> <p>GitHub menyediakan tab Insights di setiap repositori publik:</p> <p>\ud83d\udccc Buka Tab \u2192 <code>Insights &gt; Contributors</code></p> <p>Di sana, kamu akan melihat: - Grafik kontribusi tiap kontributor - Jumlah commit per minggu - Kapan dan seberapa aktif tiap anggota berkontribusi - Statistik baris kode ditambah atau dihapus</p> <p>Contoh tampilan:</p> <pre><code>+----------------+--------+------------+-----------+\n| Nama           | Commit | Baris +    | Baris -   |\n+----------------+--------+------------+-----------+\n| Rafi           | 52     | 2.134      | 1.021     |\n| Hana           | 31     | 1.409      | 899       |\n| Diah           | 26     | 1.012      | 478       |\n+----------------+--------+------------+-----------+\n</code></pre> <p>\ud83d\udd0d Melihat Riwayat Individu</p> <p>Selain grafik umum, kamu juga bisa: - Klik tab History di GitHub Desktop - Lihat daftar commit, lengkap dengan:   - Nama penulis   - Waktu   - File yang diubah   - Isi perubahan</p> <p>Cara ini efektif untuk: - Menelusuri progres skripsi - Menilai partisipasi proyek kolaboratif - Menghitung kontribusi berdasarkan waktu</p> <p>\ud83e\uddea Studi Kasus: Refleksi Kelompok Buku Digital</p> <p>Sebuah tim mahasiswa menulis buku tentang Data dan Literasi Digital. Anggota tim: - Menulis tiap bab di branch terpisah - Melakukan commit harian - Mengerjakan review via pull request</p> <p>Setelah proyek selesai, mereka membuka tab Insights dan menyusun grafik kontribusi untuk laporan akhir. Ternyata: - Salah satu anggota yang tampak pasif justru banyak bekerja pada penggabungan dan revisi - Waktu puncak kontribusi terjadi 5 hari menjelang deadline - Bab yang paling sering direvisi adalah bab ke-3</p> <p>Hasilnya? Diskusi yang lebih jujur, pembagian nilai yang lebih adil, dan proses pembelajaran yang lebih terbuka.</p> <p>\ud83d\udcca Tools Ekstra untuk Visualisasi</p> <p>Kamu bisa menggunakan tools tambahan:</p> Tool Fungsi GitHub Insights Statistik dasar kontributor dan timeline GitHub GraphQL API Query lanjutan untuk analisis mendalam <code>git log</code> + Python Analisis kustom dan visualisasi dengan matplotlib GitStats / GitHub CLI Menyusun laporan HTML dari data Git WakaTime Plugin untuk waktu kerja dan aktivitas penulisan <p>\ud83d\udcac Dari Data ke Refleksi</p> <p>Statistik Git bukan untuk saling menuduh: \u201cKamu hanya commit 3 kali!\u201d</p> <p>Melainkan untuk refleksi seperti: - \u201cKapan kami paling produktif?\u201d - \u201cSiapa yang sering merge PR?\u201d - \u201cApakah semua tim memiliki beban kerja seimbang?\u201d - \u201cBagaimana alur kerja bisa ditingkatkan di proyek berikutnya?\u201d</p> <p>\ud83e\udde0 Etika dan Transparansi</p> <p>Gunakan data Git untuk membangun: - Budaya kolaborasi sehat - Transparansi proses - Apresiasi kontribusi kecil</p> <p>Ingat, bukan semua kontribusi bisa diukur lewat commit\u2014komunikasi, ide, dan dukungan juga penting.</p> <p>\u2705 Checklist Bab Ini</p> <ul> <li>[ ] Saya tahu cara mengakses statistik kontribusi di GitHub</li> <li>[ ] Saya bisa membaca data kontribusi dari log Git</li> <li>[ ] Saya memahami cara menggunakan data itu untuk refleksi tim</li> <li>[ ] Saya ingin membangun budaya kerja yang terbuka dan adil</li> </ul> <p>\ud83d\ude80 Bab Selanjutnya: Penutup \u2013 Git untuk Hidup Belajar Sepanjang Hayat</p> <p>Di Bab 24, kita akan menutup buku ini dengan menyatukan semua pelajaran: Bagaimana Git bukan hanya alat teknis, tapi juga cara berpikir, bekerja, dan belajar sepanjang hayat.</p> <p>Karena belajar Git bukan akhir dari perjalanan\u2014tapi awal dari kebiasaan kerja yang lebih baik.</p>"},{"location":"27-babr24/","title":"Bab 24","text":"<p>\ud83c\udf31 Bab 24  Git untuk Hidup Belajar Sepanjang Hayat</p> <p>\ud83d\udcd8 Lebih dari Sekadar \u201cBelajar Git\u201d</p> <p>Saat kamu memulai perjalanan ini 24 jam lalu, mungkin kamu hanya ingin: - Mengenal Git - Menyimpan proyek dengan rapi - Menyusun dokumentasi yang bagus - Mempublikasikan karya digital</p> <p>Tapi kini, kamu bukan hanya mempelajari alat. Kamu telah mengubah cara kerja, cara berpikir, dan cara belajar.</p> <p>Git telah memperkenalkan kamu pada sesuatu yang jauh lebih penting: kebiasaan kerja yang sistematis, kolaboratif, dan reflektif.</p> <p>Dan itu akan terus berguna\u2014entah kamu jadi peneliti, guru, pengembang, penulis, aktivis data, atau pelajar seumur hidup.</p> <p>\ud83e\udde0 Git Adalah Pola Pikir</p> <p>Git melatih kamu untuk: - Menyimpan progres, bukan hanya hasil akhir - Mencatat perubahan, bukan menghapus jejak - Berpikir versi, bukan versi \u201cfinal final fix revisi 5\u201d - Berani bereksperimen, karena semua bisa dikembalikan - Belajar dari proses, bukan hanya produk</p> <p>Tanpa sadar, kamu telah belajar: - Dokumentasi - Kolaborasi - Literasi digital tingkat lanjut - Rasa percaya diri dalam belajar teknologi baru</p> <p>\ud83d\udcac Refleksi: Dulu dan Sekarang</p> Dulu Sekarang Takut terminal Paham alur kerja Git File berserakan Struktur proyek rapi dan terdokumentasi Sering revisi tanpa jejak Semua revisi tercatat dengan jelas Sering panik kehilangan file Selalu bisa kembali ke versi sebelumnya Ragu kerja tim dari jarak jauh Paham alur kolaborasi pakai branch &amp; PR Tulis seadanya di Word Tulis terstruktur di Markdown + GitBook <p>Transformasi kecil ini adalah benih perubahan besar ke depan.</p> <p>\ud83d\udee0\ufe0f Apa yang Bisa Dilakukan Setelah Ini?</p> <p>Setelah selesai membaca buku ini, kamu bisa: - Menggunakan Git dalam semua proyek belajarmu - Mengajarkan Git kepada teman atau kolegamu - Membuat repositori publik untuk bahan ajar - Menjadi kontributor proyek open source - Membangun portofolio digital sebagai penulis, peneliti, atau pendidik - Bahkan... menulis buku seperti ini bersama tim!</p> <p>Git bukan alat satu kali pakai. Ia adalah teman kerja sehari-hari.</p> <p>\ud83c\udf0d Git dan Etika Pengetahuan Terbuka</p> <p>Saat kamu membagikan hasil kerja secara terbuka, kamu ikut: - Menyebarkan pengetahuan - Menjunjung prinsip transparansi - Menginspirasi orang lain untuk belajar dan berkarya</p> <p>Dalam dunia yang serba cepat dan digital ini, keterbukaan dan dokumentasi adalah bentuk integritas. Dan Git adalah jalurnya.</p> <p>\ud83e\udde9 Kutipan Penutup</p> <p>\u201cBelajar Git bukan hanya belajar menyimpan file. Ini belajar untuk berpikir jernih, mencatat dengan jujur, dan berbagi dengan percaya diri.\u201d \u2014 Penulis buku ini (dan mungkin juga kamu \ud83d\udc99)</p> <p>\u2705 Checklist Akhir: Apakah Aku Telah\u2026</p> <ul> <li>[x] Memahami dasar-dasar Git dan GitHub</li> <li>[x] Membuat proyek riset dengan struktur rapi</li> <li>[x] Menggunakan GitBook untuk dokumentasi digital</li> <li>[x] Mengelola konflik, branch, dan pull request</li> <li>[x] Mempublikasikan proyek ke Zenodo dengan DOI</li> <li>[x] Menganalisis proses kolaborasi lewat log Git</li> <li>[x] Menggunakan Git untuk belajar dan mengajar</li> <li>[x] Merasa lebih siap menghadapi dunia digital yang terbuka</li> </ul> <p>\ud83c\udf93 Penutup</p> <p>Terima kasih telah menyelesaikan \"16+8 Jam Belajar Git\".</p> <p>Buku ini selesai, tapi perjalananmu baru dimulai. Karena dalam hidup belajar sepanjang hayat, versi kita hari ini akan selalu lebih baik dari kemarin\u2014selama kita mau mencatat, merefleksi, dan membagikan.</p> <p>Selamat berkarya. Selamat menjadi pembelajar yang tidak hanya produktif, tapi juga peduli dan terbuka.</p>"},{"location":"28-ringkas-akhir/","title":"Ringkasan Akhir","text":"<p>\ud83e\uddfe Ringkasan Akhir  24 Jam Belajar Git: Dari Tak Tahu Menjadi Terstruktur</p> <p>\ud83d\udccd Apa yang Telah Kita Pelajari?</p> <p>Selama 24 jam pembelajaran yang ditata ke dalam 24 bab, kamu telah menempuh perjalanan bertahap \u2014 mulai dari mengenal Git dan GitHub, hingga mengelola proyek riset secara terbuka dan kolaboratif.</p> <p>Kita mulai dari dasar: - Instalasi Git dan penggunaan GitHub Desktop - Membuat commit, push, pull, dan mengelola branch - Menyelesaikan konflik, memahami merge, dan pull request</p> <p>Lalu kita masuk ke praktik: - Menyusun dokumentasi dengan GitBook - Mempublikasikan hasil proyek ke Zenodo dan mendapatkan DOI - Membuat repositori rapi untuk riset, buku, hingga kolaborasi pelatihan</p> <p>Dan akhirnya, kita reflektif: - Menggunakan Git untuk non-koding (penulisan, edukasi) - Melacak kontribusi kolaborator secara etis dan adil - Menjadikan Git sebagai cara berpikir kerja jangka panjang</p> <p>\ud83c\udfaf Ringkasan Nilai-nilai yang Diperoleh</p> Prinsip Kerja Dibiasakan Melalui\u2026 Versi dan ketertelusuran Commit, log, riwayat Git Kolaborasi terbuka dan aman Branch, Pull Request, review PR Dokumentasi sebagai kebiasaan README, Markdown, GitBook Berani mencoba dan gagal Revert, eksperimen via branch Integritas ilmiah dan etika Zenodo, lisensi, referensi terbuka <p>Git bukan hanya soal teknis, tapi soal cara kerja yang menghargai proses dan saling percaya.</p> <p>\ud83d\udcd8 Untuk Siapa Buku Ini Bermanfaat?</p> <ul> <li>Mahasiswa yang sedang menyusun skripsi atau tesis</li> <li>Dosen dan peneliti yang ingin membuka dokumentasi riset</li> <li>Pengajar yang ingin membuat modul berbasis GitBook</li> <li>Penulis dan editor buku kolaboratif</li> <li>Siapa pun yang ingin bekerja lebih rapi, transparan, dan profesional di dunia digital</li> </ul> <p>\ud83d\udce4 Apa Langkahmu Selanjutnya?</p> <p>\ud83d\udd39 Gunakan Git dalam proyek nyata \u2014 bukan sekadar latihan \ud83d\udd39 Tulis dokumentasi proyekmu di GitBook \ud83d\udd39 Publikasikan di Zenodo atau platform terbuka lainnya \ud83d\udd39 Ajak orang lain bergabung dan belajar bersama \ud83d\udd39 Jadikan Git sebagai teman kerja sepanjang kariermu</p> <p>\ud83d\udcac Penutup dari Penulis</p> <p>\u201cKami tidak mengajar kamu menjadi programmer. Kami hanya ingin kamu tidak takut bekerja seperti seorang profesional.\u201d  </p> <p>\u2014 Tim Penulis 16+8 Jam Belajar Git</p> <p>\ud83c\udf93 Versi Akhirmu Hari Ini adalah Awal Versi Terbaikmu Besok.</p> <p>Tetap belajar. Tetap mencatat. Tetap terbuka. Karena dengan Git, kamu tidak pernah benar-benar kehilangan sesuatu \u2014 semua bisa kamu temukan kembali, selama kamu punya komitmen.</p> <p>\ud83d\udcd8 Selamat! Kamu telah menutup bukumu. Tapi semoga tidak menutup semangat belajarmu. Mau aku bantu simpan ringkasan akhir ini ke GitBook sebagai halaman penutup digital? \ud83d\ude0a</p>"},{"location":"29-lampiran1/","title":"Lampiran 1","text":"<p>\ud83d\udcd8 Lampiran 1 \u2013 README.md</p> <p>\ud83e\udde0 Apa Itu README?</p> <p>README.md adalah file utama dokumentasi dalam repositori. GitHub secara otomatis menampilkannya di halaman depan repo.</p> <p>Format: Markdown (<code>.md</code>)</p> <p>\ud83d\udce6 Isi README yang Ideal</p> <p>README harus menjelaskan secara ringkas tapi jelas: 1. Judul proyek 2. Deskripsi singkat (tujuan, latar belakang) 3. Struktur folder (apa isinya, di mana) 4. Cara menjalankan kode 5. Contoh output / hasil 6. Cara kontribusi (opsional) 7. Lisensi 8. Citation / DOI (jika dihubungkan ke Zenodo)</p> <p>\ud83d\udcc4 Template README.md (Markdown)</p> <pre><code> \ud83d\udcca Riset XYZ: Analisis Data Sosial\n\n&gt; Proyek ini bertujuan untuk menganalisis pola interaksi sosial menggunakan dataset survei nasional.\n\n---\n\n \ud83d\udcc1 Struktur Repo\n\n</code></pre> <p>riset-xyz/ \u251c\u2500\u2500 data/               \u2190 Dataset mentah dan bersih \u251c\u2500\u2500 code/               \u2190 Script analisis (Python) \u251c\u2500\u2500 docs/               \u2190 Dokumentasi Markdown (untuk GitBook) \u2514\u2500\u2500 README.md           \u2190 File ini</p> <pre><code>\n---\n\n \ud83d\udee0\ufe0f Cara Menjalankan\n\n1. Pastikan Python 3.10+ sudah terpasang\n2. Install dependensi:\n\n```bash\npip install -r requirements.txt\n</code></pre> <ol> <li>Jalankan skrip analisis:</li> </ol> <pre><code>python code/analisis.py\n</code></pre> <p>\ud83d\udcc8 Contoh Output</p> <ul> <li>Grafik interaksi antar variabel</li> <li>Ringkasan statistik</li> <li>Hasil regresi logistik</li> </ul> <p>\ud83e\udd1d Kontribusi</p> <p>Silakan fork repo ini dan ajukan Pull Request! Lihat CONTRIBUTING.md untuk panduan lengkap.</p> <p>\ud83e\udeaa Lisensi</p> <p>Proyek ini menggunakan lisensi MIT. Silakan gunakan dan modifikasi dengan atribusi yang sesuai.</p> <p>\ud83d\udcda Citation</p> <p>Jika kamu menggunakan proyek ini, mohon kutip sebagai berikut:</p> <pre><code>Penulis, A. (2025). Riset XYZ (Version 1.0) [Dataset &amp; Code]. Zenodo. https://doi.org/10.5281/zenodo.1234567\n</code></pre> <p>```</p> <p>\u2705 Tips - Simpan file ini di root repo (<code>/README.md</code>) - Selalu update jika struktur folder atau tujuan proyek berubah - Gunakan emoji untuk membantu keterbacaan (opsional, tapi enak dilihat \ud83d\ude0a)</p>"},{"location":"30-lampiran2/","title":"Lampiran 2","text":"<p>\ud83d\udcd8 Lampiran 2 \u2013 LICENSE</p> <p>\u2753 Apa Itu LICENSE?</p> <p>File <code>LICENSE</code> menjelaskan hak penggunaan atas kode, data, atau dokumentasi dalam repositori kamu. Tanpa lisensi, secara hukum orang lain tidak bisa menggunakan, menyalin, atau memodifikasi hasil kerjamu.</p> <p>\ud83d\udcda Jenis-Jenis Lisensi Open Source (Umum Digunakan)</p> Nama Lisensi Hak Pengguna Boleh Dipakai Komersial? Wajib Mention Penulis? Boleh Ubah Kode? Catatan MIT Bebas pakai, ubah, distribusi \u2705 Ya \u2705 Ya \u2705 Ya Sangat bebas, populer Apache 2.0 Seperti MIT + perlindungan paten \u2705 Ya \u2705 Ya \u2705 Ya Cocok untuk perusahaan GPL 3.0 Bebas tapi harus open-source jika dipakai ulang \u2705 Ya \u2705 Ya \u2705 Ya Lebih ketat BSD 3-Clause Mirip MIT, tapi ada batasan nama \u2705 Ya \u2705 Ya \u2705 Ya Digunakan banyak universitas CC-BY 4.0 Cocok untuk dokumen/data \u2705 Ya \u2705 Ya \u2705 Ya Cocok untuk dataset &amp; dokumen CC0 Public domain, tanpa syarat \u2705 Ya \u274c Tidak wajib \u2705 Ya Sangat bebas <p>\u2699\ufe0f Cara Menyiapkan LICENSE</p> <ol> <li>Tentukan tujuan kamu:</li> <li>Mau kode bebas dipakai tanpa batas? \u2192 MIT</li> <li>Mau orang wajib open-source juga? \u2192 GPL</li> <li> <p>Mau lisensi data saja? \u2192 CC-BY</p> </li> <li> <p>Di GitHub:</p> </li> <li>Klik \"Add file\" \u2192 \"Create new file\"</li> <li>Nama file: <code>LICENSE</code></li> <li> <p>GitHub akan bantu pilih template lisensi</p> </li> <li> <p>Atau tulis manual dari template di bawah</p> </li> </ol> <p>\ud83d\udcc4 Contoh Template: MIT License (Sederhana)</p> <pre><code>MIT License\n\nCopyright (c) 2025 [Nama Kamu]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software.\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND...\n</code></pre> <p>Ganti <code>[Nama Kamu]</code> dengan nama atau nama institusi.</p> <p>\ud83d\udcd8 Contoh Template: Creative Commons (CC-BY 4.0)</p> <pre><code>Creative Commons Attribution 4.0 International (CC BY 4.0)\n\nYou are free to:\n- Share \u2014 copy and redistribute the material\n- Adapt \u2014 remix, transform, and build upon the material\nfor any purpose, even commercially.\n\nYou must give appropriate credit, provide a link to the license, and indicate if changes were made.\nhttps://creativecommons.org/licenses/by/4.0/\n</code></pre> <p>\u2705 Tips - Letakkan file LICENSE di root repositori - Tambahkan penjelasan di <code>README.md</code> tentang lisensi yang digunakan - Untuk proyek gabungan (data + kode), kamu bisa gunakan dua lisensi: misalnya MIT untuk kode, CC-BY untuk data</p>"},{"location":"31-lampiran3/","title":"Lampiran 3","text":"<p>\ud83d\udcd8 Lampiran 3 \u2013 Mengapa Menggunakan Zenodo</p> <p>\u2753 Apa Itu Zenodo?</p> <p>Zenodo adalah layanan arsip ilmiah milik CERN &amp; OpenAIRE, yang memungkinkan kamu:</p> <ul> <li>Menyimpan dan membagikan kode, dataset, dan dokumen</li> <li>Menerbitkan versi resmi proyek GitHub</li> <li>Mendapatkan DOI (Digital Object Identifier) seperti jurnal ilmiah</li> <li>Menjadi bagian dari Open Science</li> </ul> <p>\ud83d\udca1 Zenodo sangat cocok untuk proyek riset, pendidikan, dokumentasi publik, dan open source.</p> <p>\u2705 1. Mengapa Menggunakan Zenodo?</p> <p>Alasan utama:</p> Alasan Penjelasan \ud83d\udccc Penerbitan Ilmiah Dapatkan DOI resmi untuk proyek GitHub kamu (seperti publikasi jurnal) \ud83d\udcbe Penyimpanan Jangka Panjang Disimpan oleh CERN, cocok untuk arsip riset digital \u267b\ufe0f Versi dan Reproduksibilitas Setiap rilis GitHub bisa diarsipkan dengan versi dan metadata jelas \ud83c\udf0d Open Access Semua orang bisa akses dan gunakan \ud83d\udd17 Terhubung dengan GitHub Otomatis arsip setiap release GitHub <p>\ud83d\udc63 2. Cara Membuat Akun Zenodo</p> <ol> <li>Buka https://zenodo.org</li> <li>Klik Sign Up</li> <li>Bisa daftar pakai:</li> <li>GitHub</li> <li>ORCiD</li> <li>Email biasa</li> <li>Verifikasi email</li> </ol> <p>\ud83d\udd17 3. Integrasi Zenodo dengan GitHub</p> <ol> <li>Login ke Zenodo</li> <li>Klik ikon profil kanan atas \u2192 GitHub</li> <li>Zenodo akan minta izin \u2192 izinkan</li> <li>Kamu akan lihat daftar repo GitHub</li> <li>Aktifkan toggle (\u2714\ufe0f) untuk repo yang ingin diarsipkan    Contoh: aktifkan <code>riset-ku</code></li> </ol> <p>\ud83e\uddea 4. Cara Dapat DOI dari GitHub</p> <p>Setelah repo terhubung ke Zenodo:</p> <ol> <li>Buka halaman GitHub repo kamu</li> <li>Klik \"Releases\" \u2192 Draft a new release</li> <li>Isi:</li> <li>Tag: <code>v1.0</code>, <code>v1.1</code>, dst.</li> <li>Deskripsi: misalnya \"Versi pertama hasil riset\"</li> <li>Klik Publish Release</li> </ol> <p>\ud83d\udcec Setelah itu, Zenodo akan: - Menarik versi rilis dari GitHub - Menyimpan salinannya di server CERN - Mengeluarkan DOI unik versi itu</p> <p>\ud83e\udded 5. DOI Per Versi vs DOI Induk</p> <p>Setiap kali kamu buat release, Zenodo akan:</p> <ul> <li> <p>Buat DOI unik untuk versi itu, misal: <code>https://doi.org/10.5281/zenodo.1234567</code></p> </li> <li> <p>Buat juga DOI induk untuk seluruh proyek: <code>https://doi.org/10.5281/zenodo.1234560</code></p> </li> </ul> <p>\ud83d\udca1 Kamu bisa: - Pakai DOI versi kalau ingin kutip versi tertentu (misal v1.0) - Pakai DOI induk kalau ingin kutip proyek secara umum</p> <p>\ud83d\udccc Tips Tambahan:</p> <ul> <li>Setiap file Markdown yang kamu dokumentasikan bisa cantumkan DOI Zenodo di akhir</li> <li>Tambahkan badge DOI ke README repo GitHub kamu:</li> </ul> <pre><code>[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.1234567.svg)](https://doi.org/10.5281/zenodo.1234567)\n</code></pre> <p>\ud83e\uddea Tugas Mandiri: 1. Sudah punya akun Zenodo? 2. Sudah hubungkan repo GitHub kamu? 3. Sudah buat release dan dapat DOI? 4. Sudah cantumkan DOI di README atau GitBook?</p>"},{"location":"32-lampiran4/","title":"Lampiran 4","text":"<p>\ud83d\udcd8 Lampiran 4 \u2013 Mengapa Menggunakan GitBook Dibanding Aplikasi Lain</p> <p>\u2753 Apa Itu GitBook?</p> <p>GitBook adalah platform untuk menulis, menyusun, dan menerbitkan dokumentasi dalam bentuk buku digital berbasis Markdown. GitBook sangat cocok untuk: - Dokumentasi riset - Modul belajar - Panduan penggunaan perangkat lunak - Laporan proyek</p> <p>\u2705 1. Alasan Menggunakan GitBook</p> Alasan Penjelasan \ud83d\udcc4 Tampilan bersih dan profesional GitBook menghasilkan tampilan seperti buku digital yang rapi dan enak dibaca \ud83d\udd17 Terintegrasi langsung dengan GitHub Perubahan file <code>.md</code> di GitHub langsung muncul di GitBook \u2699\ufe0f Mudah digunakan (tanpa coding) Antarmuka modern dan ramah pengguna, cukup klik dan edit \ud83e\uddf1 Struktur bab otomatis GitBook menyusun halaman berdasarkan struktur file \ud83d\udd0d Pencarian otomatis GitBook menyediakan fitur pencarian yang instan dan akurat \ud83c\udf0d Bisa dibuka publik online Buku kamu bisa diakses oleh siapa saja melalui link \ud83d\udca1 Dukung kolaborasi tim Bisa mengundang kolaborator dan menulis bersama \ud83d\udcda Cocok untuk dokumentasi riset Markdown + GitHub = ringkas, terbuka, dan terstruktur <p>\ud83d\udd0d 2. Perbandingan dengan Aplikasi Lain</p> Fitur GitBook Google Docs Notion Typora / Editor Markdown Jupyter Book Tampilan seperti buku \u2705 \u274c \u274c \u274c \u2705 Dukungan GitHub langsung \u2705 \u274c \u274c \u274c \u2705 Markdown native \u2705 \u274c \u26a0\ufe0f \u2705 \u2705 Bisa publish publik online \u2705 \u2705 \u2705 \u274c \u2705 Versi gratis untuk open use \u2705 \u2705 \u26a0\ufe0f \u2705 \u2705 Kolaborasi real-time \u2705 \u2705 \u2705 \u274c \u274c Belajar mandiri mudah \u2705 \u2705 \u2705 \u26a0\ufe0f \u26a0\ufe0f <p>Kesimpulan: GitBook adalah kombinasi terbaik dari dokumentasi teknis + buku belajar + koneksi Git.</p> <p>\ud83e\udde0 3. Siapa Cocok Pakai GitBook?</p> <ul> <li>Mahasiswa atau peneliti dokumentasikan tugas akhir</li> <li>Dosen membuat materi belajar daring</li> <li>Tim developer menyusun dokumentasi API atau proyek</li> <li>Aktivis open knowledge yang ingin berbagi ilmu</li> </ul> <p>\ud83d\udce6 4. Fitur GitBook yang Menonjol</p> <ul> <li>\ud83d\udcc1 Folder = Bab</li> <li>\ud83d\udcc4 File <code>.md</code> = Halaman buku</li> <li>\ud83c\udf10 Otomatis tampil online</li> <li>\ud83d\udd04 Terhubung ke GitHub \u2192 tinggal commit dari GitHub Desktop</li> <li>\u270f\ufe0f Bisa edit langsung di web juga</li> <li>\ud83d\udce4 Export ke PDF (opsional)</li> </ul> <p>\u2705 Tips - Gunakan GitBook untuk menampung semua dokumentasi di folder <code>docs/</code> - Jangan takut mulai dari Markdown sederhana, nanti GitBook yang bantu atur - Tambahkan gambar, daftar isi, dan link antar bab untuk pengalaman belajar yang lebih baik</p>"},{"location":"33-glosarium/","title":"Glosarium","text":"<p>\ud83d\udcda Glosarium \u2013 16+8 Jam Belajar Git</p> <p>\ud83d\udd24 A\u2013D</p> <ul> <li>Branch: Cabang dari alur kerja utama yang digunakan untuk mengembangkan fitur secara terpisah tanpa memengaruhi isi utama.</li> <li>Clone: Salinan penuh dari sebuah repository GitHub ke komputer lokal.</li> <li>Commit: Penyimpanan snapshot perubahan pada file. Commit harus disertai pesan deskriptif.</li> <li>Conflict (Konflik): Keadaan saat dua perubahan bertabrakan dalam satu bagian file, biasanya saat merge branch.</li> <li>Docs/: Folder yang menyimpan dokumentasi proyek dalam bentuk file Markdown.</li> <li>DOI (Digital Object Identifier): Identitas digital unik untuk publikasi ilmiah, termasuk proyek GitHub yang dirilis via Zenodo.</li> </ul> <p>\ud83d\udd24 E\u2013G</p> <ul> <li>Fork: Menyalin repository orang lain ke akun GitHub kamu, agar bisa kamu modifikasi sendiri tanpa memengaruhi repo aslinya.</li> <li>Git: Sistem kontrol versi terdistribusi untuk melacak perubahan dalam kode/program secara efisien.</li> <li>GitBook: Platform untuk menulis dokumentasi atau buku digital dari file Markdown. Terintegrasi dengan GitHub.</li> <li>GitHub: Layanan berbasis web yang menyimpan dan mengelola repository Git secara online.</li> <li>GitHub Desktop: Aplikasi berbasis GUI untuk mengelola repository Git tanpa perlu mengetik perintah di Terminal.</li> </ul> <p>\ud83d\udd24 I\u2013M</p> <ul> <li>.gitignore: File konfigurasi untuk memberitahu Git agar mengabaikan file tertentu saat commit.</li> <li>Issue: Fitur GitHub untuk melacak bug, tugas, atau diskusi seputar proyek.</li> <li>LICENSE: File yang menjelaskan hak cipta dan izin penggunaan untuk kode, data, atau dokumen dalam repo.</li> <li>Markdown (.md): Format teks ringan yang digunakan untuk menulis dokumentasi dengan sintaks sederhana.</li> <li>Merge: Menggabungkan perubahan dari satu branch ke branch lain (biasanya ke <code>main</code>).</li> </ul> <p>\ud83d\udd24 P\u2013R</p> <ul> <li>Pull: Mengambil perubahan terbaru dari remote repository GitHub ke lokal.</li> <li>Pull Request (PR): Permintaan untuk menggabungkan perubahan dari satu branch (atau fork) ke branch utama proyek.</li> <li>Push: Mengirim perubahan dari repo lokal ke repo GitHub.</li> <li>README.md: File utama untuk memperkenalkan isi repositori dan cara menggunakannya.</li> <li>Release: Versi tertentu dari proyek yang dirilis resmi di GitHub, biasanya terhubung ke Zenodo.</li> </ul> <p>\ud83d\udd24 S\u2013Z</p> <ul> <li>Staging Area: Tempat penampungan sementara file yang siap untuk di-commit.</li> <li>Terminal: Aplikasi baris perintah di Mac yang bisa digunakan untuk menjalankan perintah Git.</li> <li>Versioning: Penomoran versi proyek (misalnya v1.0, v1.1) untuk menandai perkembangan atau rilis resmi.</li> <li>Zenodo: Repositori ilmiah yang memungkinkan penyimpanan, publikasi, dan pemberian DOI untuk proyek GitHub.</li> </ul>"},{"location":"34-pustaka/","title":"Daftar Pustaka","text":"<p>\ud83d\udcda Daftar Pustaka</p> <ol> <li> <p>Chacon, S., &amp; Straub, B. (2014). Pro Git (2nd ed.). Apress.    \u27a4 https://git-scm.com/book/en/v2</p> </li> <li> <p>Blischak, J. D., Davenport, E. R., &amp; Wilson, G. (2016). \"A Quick Introduction to Version Control with Git and GitHub\". PLOS Computational Biology, 12(1), e1004668.    \u27a4 https://doi.org/10.1371/journal.pcbi.1004668</p> </li> <li> <p>P\u00e9rez-Rodr\u00edguez, F., Guti\u00e9rrez-Fern\u00e1ndez, J. A., &amp; Ruiz-Rube, I. (2020). \"GitBook as an Educational Tool for Technical Documentation in Computer Science Degrees\". Education Sciences, 10(11), 325.    \u27a4 https://doi.org/10.3390/educsci10110325</p> </li> <li> <p>Wilson, G., et al. (2017). \"Good enough practices in scientific computing\". PLOS Computational Biology, 13(6), e1005510.    \u27a4 https://doi.org/10.1371/journal.pcbi.1005510</p> </li> <li> <p>Bryan, J. (2018). \"Excuse Me, Do You Have a Moment to Talk About Version Control?\". The American Statistician, 72(1), 20\u201327.    \u27a4 https://doi.org/10.1080/00031305.2017.1399928</p> </li> <li> <p>The Turing Way Community. (2021). The Turing Way: A handbook for reproducible data science.    \u27a4 https://the-turing-way.netlify.app</p> </li> <li> <p>Zenodo (n.d.). Zenodo \u2014 Research. Shared.    \u27a4 https://zenodo.org</p> </li> <li> <p>GitHub Docs. (n.d.). About pull requests.    \u27a4 https://docs.github.com/en/pull-requests</p> </li> <li> <p>Ram, K. (2013). \"Git can facilitate greater reproducibility and increased transparency in science\". Source Code for Biology and Medicine, 8(1), 7.    \u27a4 https://doi.org/10.1186/1751-0473-8-7</p> </li> <li> <p>Lowndes, J. S. S., et al. (2017). \"Our path to better science in less time using open data science tools\". Nature Ecology &amp; Evolution, 1(6), 0160.    \u27a4 https://doi.org/10.1038/s41559-017-0160</p> </li> </ol> <p>Semua sumber ini benar-benar ada dan bisa kamu telusuri ulang. Ingin aku bantu ubah formatnya ke BibTeX, APA, atau disisipkan ke GitBook sebagai daftar pustaka otomatis? \ud83d\ude0a</p>"}]}